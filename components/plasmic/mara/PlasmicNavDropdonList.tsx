/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6GgaEV8wA3NAjSPNQQE37W
// Component: -2e7Z4uIVPNy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavBarLink from "../../NavBarLink"; // plasmic-import: uq5Q3NstJD05/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: 6GgaEV8wA3NAjSPNQQE37W/projectcss
import sty from "./PlasmicNavDropdonList.module.css"; // plasmic-import: -2e7Z4uIVPNy/css

createPlasmicElementProxy;

export type PlasmicNavDropdonList__VariantMembers = {
  link: "aboutUs" | "operations";
};
export type PlasmicNavDropdonList__VariantsArgs = {
  link?: MultiChoiceArg<"aboutUs" | "operations">;
};
type VariantPropType = keyof PlasmicNavDropdonList__VariantsArgs;
export const PlasmicNavDropdonList__VariantProps = new Array<VariantPropType>(
  "link"
);

export type PlasmicNavDropdonList__ArgsType = {};
type ArgPropType = keyof PlasmicNavDropdonList__ArgsType;
export const PlasmicNavDropdonList__ArgProps = new Array<ArgPropType>();

export type PlasmicNavDropdonList__OverridesType = {
  navItemDropdownList6?: Flex__<"div">;
};

export interface DefaultNavDropdonListProps {
  link?: MultiChoiceArg<"aboutUs" | "operations">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavDropdonList__RenderFunc(props: {
  variants: PlasmicNavDropdonList__VariantsArgs;
  args: PlasmicNavDropdonList__ArgsType;
  overrides: PlasmicNavDropdonList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "link",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.link
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isNavItemDropdownList6Hover, triggerNavItemDropdownList6HoverProps] =
    useTrigger("useHover", {});
  const triggers = {
    hover_navItemDropdownList6: isNavItemDropdownList6Hover
  };

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"navItemDropdownList6"}
      data-plasmic-override={overrides.navItemDropdownList6}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.navItemDropdownList6
      )}
      data-plasmic-trigger-props={[triggerNavItemDropdownList6HoverProps]}
    >
      <NavBarLink
        className={classNames("__wab_instance", sty.navBarLink___0P3Vy)}
        linktext={"OUR PILLARS "}
      />

      <NavBarLink
        className={classNames("__wab_instance", sty.navBarLink___45LCj)}
        linktext={"CLIMATE, CULTURE, & COMMUNITY  "}
      />

      <NavBarLink
        className={classNames("__wab_instance", sty.navBarLink__iAtHn)}
        linktext={"EXECUTIVE TEAM "}
      />

      <NavBarLink
        className={classNames("__wab_instance", sty.navBarLink__mJzxo)}
        linktext={"CAREERS"}
      />

      <NavBarLink
        className={classNames("__wab_instance", sty.navBarLink__zFkj2)}
        linktext={"CONTACT"}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navItemDropdownList6: ["navItemDropdownList6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  navItemDropdownList6: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavDropdonList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavDropdonList__VariantsArgs;
    args?: PlasmicNavDropdonList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavDropdonList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavDropdonList__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavDropdonList__ArgProps,
          internalVariantPropNames: PlasmicNavDropdonList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavDropdonList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navItemDropdownList6") {
    func.displayName = "PlasmicNavDropdonList";
  } else {
    func.displayName = `PlasmicNavDropdonList.${nodeName}`;
  }
  return func;
}

export const PlasmicNavDropdonList = Object.assign(
  // Top-level PlasmicNavDropdonList renders the root element
  makeNodeComponent("navItemDropdownList6"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicNavDropdonList
    internalVariantProps: PlasmicNavDropdonList__VariantProps,
    internalArgProps: PlasmicNavDropdonList__ArgProps
  }
);

export default PlasmicNavDropdonList;
/* prettier-ignore-end */
