/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6GgaEV8wA3NAjSPNQQE37W
// Component: mbkly9G2X3L1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Video } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariants_19VDikmmmbc3 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 19vDIKMMMBC3/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6GgaEV8wA3NAjSPNQQE37W/projectcss
import sty from "./PlasmicHeroSection.module.css"; // plasmic-import: mbkly9G2X3L1/css

import GCurvedCornerIcon from "./icons/PlasmicIcon__GCurvedCorner"; // plasmic-import: xBHjxIupafBj/icon

createPlasmicElementProxy;

export type PlasmicHeroSection__VariantMembers = {};
export type PlasmicHeroSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeroSection__VariantsArgs;
export const PlasmicHeroSection__VariantProps = new Array<VariantPropType>();

export type PlasmicHeroSection__ArgsType = { heroTitle?: string };
type ArgPropType = keyof PlasmicHeroSection__ArgsType;
export const PlasmicHeroSection__ArgProps = new Array<ArgPropType>("heroTitle");

export type PlasmicHeroSection__OverridesType = {
  heroSection?: Flex__<"div">;
  homeHeroCard?: Flex__<"div">;
  homeHeroTitleWrap?: Flex__<"div">;
  title?: Flex__<"div">;
  gLayoutDivider?: Flex__<"div">;
  itemDivider?: Flex__<"div">;
  overallFigureList?: Flex__<"div">;
  overallFigureItem?: Flex__<"div">;
  overallFigureText?: Flex__<"div">;
  figure?: Flex__<"div">;
  unitWrap?: Flex__<"div">;
  unit?: Flex__<"div">;
  gLayoutDivider2?: Flex__<"div">;
  itemDivider2?: Flex__<"div">;
  overallFigureContent?: Flex__<"div">;
  titleGoesHere?: Flex__<"div">;
  overallFigureDateWrap?: Flex__<"div">;
  asOf?: Flex__<"div">;
  date?: Flex__<"div">;
  overallFigureItem2?: Flex__<"div">;
  overallFigureText2?: Flex__<"div">;
  figure2?: Flex__<"div">;
  unitWrap2?: Flex__<"div">;
  unit2?: Flex__<"div">;
  gLayoutDivider3?: Flex__<"div">;
  itemDivider3?: Flex__<"div">;
  overallFigureContent2?: Flex__<"div">;
  titleGoesHere2?: Flex__<"div">;
  overallFigureDateWrap2?: Flex__<"div">;
  asOf2?: Flex__<"div">;
  date2?: Flex__<"div">;
  overallFigureItem3?: Flex__<"div">;
  overallFigureText3?: Flex__<"div">;
  figure3?: Flex__<"div">;
  unitWrap3?: Flex__<"div">;
  unit3?: Flex__<"div">;
  gLayoutDivider4?: Flex__<"div">;
  itemDivider4?: Flex__<"div">;
  overallFigureContent3?: Flex__<"div">;
  titleGoesHere3?: Flex__<"div">;
  overallFigureDateWrap3?: Flex__<"div">;
  asOf3?: Flex__<"div">;
  date3?: Flex__<"div">;
  overallFigureItem4?: Flex__<"div">;
  overallFigureText4?: Flex__<"div">;
  figure4?: Flex__<"div">;
  unitWrap4?: Flex__<"div">;
  unit4?: Flex__<"div">;
  gLayoutDivider5?: Flex__<"div">;
  itemDivider5?: Flex__<"div">;
  overallFigureContent4?: Flex__<"div">;
  titleGoesHere4?: Flex__<"div">;
  overallFigureDateWrap4?: Flex__<"div">;
  asOf4?: Flex__<"div">;
  date4?: Flex__<"div">;
  cta?: Flex__<"div">;
  btnStd?: Flex__<"div">;
  label?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  freeBox?: Flex__<"div">;
  svg?: Flex__<"svg">;
  htmlVideo?: Flex__<typeof Video>;
};

export interface DefaultHeroSectionProps {
  heroTitle?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeroSection__RenderFunc(props: {
  variants: PlasmicHeroSection__VariantsArgs;
  args: PlasmicHeroSection__ArgsType;
  overrides: PlasmicHeroSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          heroTitle: "Text"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_19VDikmmmbc3()
  });

  return (
    <div
      data-plasmic-name={"heroSection"}
      data-plasmic-override={overrides.heroSection}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.heroSection
      )}
    >
      <div
        data-plasmic-name={"homeHeroCard"}
        data-plasmic-override={overrides.homeHeroCard}
        className={classNames(projectcss.all, sty.homeHeroCard)}
      >
        <div
          data-plasmic-name={"homeHeroTitleWrap"}
          data-plasmic-override={overrides.homeHeroTitleWrap}
          className={classNames(projectcss.all, sty.homeHeroTitleWrap)}
        >
          <div
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.title
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.heroTitle;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Text";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div
          data-plasmic-name={"gLayoutDivider"}
          data-plasmic-override={overrides.gLayoutDivider}
          className={classNames(projectcss.all, sty.gLayoutDivider)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"itemDivider"}
            data-plasmic-override={overrides.itemDivider}
            hasGap={true}
            className={classNames(projectcss.all, sty.itemDivider)}
          />
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"overallFigureList"}
          data-plasmic-override={overrides.overallFigureList}
          hasGap={true}
          className={classNames(projectcss.all, sty.overallFigureList)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"overallFigureItem"}
            data-plasmic-override={overrides.overallFigureItem}
            hasGap={true}
            className={classNames(projectcss.all, sty.overallFigureItem)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"overallFigureText"}
              data-plasmic-override={overrides.overallFigureText}
              hasGap={true}
              className={classNames(projectcss.all, sty.overallFigureText)}
            >
              <div
                data-plasmic-name={"figure"}
                data-plasmic-override={overrides.figure}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.figure
                )}
              >
                {"4"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"unitWrap"}
                data-plasmic-override={overrides.unitWrap}
                hasGap={true}
                className={classNames(projectcss.all, sty.unitWrap)}
              >
                {false ? (
                  <div
                    data-plasmic-name={"unit"}
                    data-plasmic-override={overrides.unit}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.unit
                    )}
                  >
                    {"xx"}
                  </div>
                ) : null}
              </Stack__>
            </Stack__>
            <div
              data-plasmic-name={"gLayoutDivider2"}
              data-plasmic-override={overrides.gLayoutDivider2}
              className={classNames(projectcss.all, sty.gLayoutDivider2)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"itemDivider2"}
                data-plasmic-override={overrides.itemDivider2}
                hasGap={true}
                className={classNames(projectcss.all, sty.itemDivider2)}
              />
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"overallFigureContent"}
              data-plasmic-override={overrides.overallFigureContent}
              hasGap={true}
              className={classNames(projectcss.all, sty.overallFigureContent)}
            >
              <div
                data-plasmic-name={"titleGoesHere"}
                data-plasmic-override={overrides.titleGoesHere}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.titleGoesHere
                )}
              >
                {"Title goes here"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"overallFigureDateWrap"}
                data-plasmic-override={overrides.overallFigureDateWrap}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.overallFigureDateWrap
                )}
              >
                <div
                  data-plasmic-name={"asOf"}
                  data-plasmic-override={overrides.asOf}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.asOf
                  )}
                >
                  {"AS of"}
                </div>
                <div
                  data-plasmic-name={"date"}
                  data-plasmic-override={overrides.date}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.date
                  )}
                >
                  {"07.31.2024"}
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"overallFigureItem2"}
            data-plasmic-override={overrides.overallFigureItem2}
            hasGap={true}
            className={classNames(projectcss.all, sty.overallFigureItem2)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"overallFigureText2"}
              data-plasmic-override={overrides.overallFigureText2}
              hasGap={true}
              className={classNames(projectcss.all, sty.overallFigureText2)}
            >
              <div
                data-plasmic-name={"figure2"}
                data-plasmic-override={overrides.figure2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.figure2
                )}
              >
                {"13"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"unitWrap2"}
                data-plasmic-override={overrides.unitWrap2}
                hasGap={true}
                className={classNames(projectcss.all, sty.unitWrap2)}
              >
                {false ? (
                  <div
                    data-plasmic-name={"unit2"}
                    data-plasmic-override={overrides.unit2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.unit2
                    )}
                  >
                    {"xx"}
                  </div>
                ) : null}
              </Stack__>
            </Stack__>
            <div
              data-plasmic-name={"gLayoutDivider3"}
              data-plasmic-override={overrides.gLayoutDivider3}
              className={classNames(projectcss.all, sty.gLayoutDivider3)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"itemDivider3"}
                data-plasmic-override={overrides.itemDivider3}
                hasGap={true}
                className={classNames(projectcss.all, sty.itemDivider3)}
              />
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"overallFigureContent2"}
              data-plasmic-override={overrides.overallFigureContent2}
              hasGap={true}
              className={classNames(projectcss.all, sty.overallFigureContent2)}
            >
              <div
                data-plasmic-name={"titleGoesHere2"}
                data-plasmic-override={overrides.titleGoesHere2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.titleGoesHere2
                )}
              >
                {"Title goes here"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"overallFigureDateWrap2"}
                data-plasmic-override={overrides.overallFigureDateWrap2}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.overallFigureDateWrap2
                )}
              >
                <div
                  data-plasmic-name={"asOf2"}
                  data-plasmic-override={overrides.asOf2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.asOf2
                  )}
                >
                  {"AS of"}
                </div>
                <div
                  data-plasmic-name={"date2"}
                  data-plasmic-override={overrides.date2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.date2
                  )}
                >
                  {"07.31.2024"}
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"overallFigureItem3"}
            data-plasmic-override={overrides.overallFigureItem3}
            hasGap={true}
            className={classNames(projectcss.all, sty.overallFigureItem3)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"overallFigureText3"}
              data-plasmic-override={overrides.overallFigureText3}
              hasGap={true}
              className={classNames(projectcss.all, sty.overallFigureText3)}
            >
              <div
                data-plasmic-name={"figure3"}
                data-plasmic-override={overrides.figure3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.figure3
                )}
              >
                {"31.8"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"unitWrap3"}
                data-plasmic-override={overrides.unitWrap3}
                hasGap={true}
                className={classNames(projectcss.all, sty.unitWrap3)}
              >
                <div
                  data-plasmic-name={"unit3"}
                  data-plasmic-override={overrides.unit3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.unit3
                  )}
                >
                  {"EH/s"}
                </div>
              </Stack__>
            </Stack__>
            <div
              data-plasmic-name={"gLayoutDivider4"}
              data-plasmic-override={overrides.gLayoutDivider4}
              className={classNames(projectcss.all, sty.gLayoutDivider4)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"itemDivider4"}
                data-plasmic-override={overrides.itemDivider4}
                hasGap={true}
                className={classNames(projectcss.all, sty.itemDivider4)}
              />
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"overallFigureContent3"}
              data-plasmic-override={overrides.overallFigureContent3}
              hasGap={true}
              className={classNames(projectcss.all, sty.overallFigureContent3)}
            >
              <div
                data-plasmic-name={"titleGoesHere3"}
                data-plasmic-override={overrides.titleGoesHere3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.titleGoesHere3
                )}
              >
                {"Title goes here"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"overallFigureDateWrap3"}
                data-plasmic-override={overrides.overallFigureDateWrap3}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.overallFigureDateWrap3
                )}
              >
                <div
                  data-plasmic-name={"asOf3"}
                  data-plasmic-override={overrides.asOf3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.asOf3
                  )}
                >
                  {"AS of"}
                </div>
                <div
                  data-plasmic-name={"date3"}
                  data-plasmic-override={overrides.date3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.date3
                  )}
                >
                  {"07.31.2024"}
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"overallFigureItem4"}
            data-plasmic-override={overrides.overallFigureItem4}
            hasGap={true}
            className={classNames(projectcss.all, sty.overallFigureItem4)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"overallFigureText4"}
              data-plasmic-override={overrides.overallFigureText4}
              hasGap={true}
              className={classNames(projectcss.all, sty.overallFigureText4)}
            >
              <div
                data-plasmic-name={"figure4"}
                data-plasmic-override={overrides.figure4}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.figure4
                )}
              >
                {"1,100"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"unitWrap4"}
                data-plasmic-override={overrides.unitWrap4}
                hasGap={true}
                className={classNames(projectcss.all, sty.unitWrap4)}
              >
                <div
                  data-plasmic-name={"unit4"}
                  data-plasmic-override={overrides.unit4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.unit4
                  )}
                >
                  {"MW"}
                </div>
              </Stack__>
            </Stack__>
            <div
              data-plasmic-name={"gLayoutDivider5"}
              data-plasmic-override={overrides.gLayoutDivider5}
              className={classNames(projectcss.all, sty.gLayoutDivider5)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"itemDivider5"}
                data-plasmic-override={overrides.itemDivider5}
                hasGap={true}
                className={classNames(projectcss.all, sty.itemDivider5)}
              />
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"overallFigureContent4"}
              data-plasmic-override={overrides.overallFigureContent4}
              hasGap={true}
              className={classNames(projectcss.all, sty.overallFigureContent4)}
            >
              <div
                data-plasmic-name={"titleGoesHere4"}
                data-plasmic-override={overrides.titleGoesHere4}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.titleGoesHere4
                )}
              >
                {"AVAILABLE COMPUTE CAPACITY"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"overallFigureDateWrap4"}
                data-plasmic-override={overrides.overallFigureDateWrap4}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.overallFigureDateWrap4
                )}
              >
                <div
                  data-plasmic-name={"asOf4"}
                  data-plasmic-override={overrides.asOf4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.asOf4
                  )}
                >
                  {"AS of"}
                </div>
                <div
                  data-plasmic-name={"date4"}
                  data-plasmic-override={overrides.date4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.date4
                  )}
                >
                  {"07.31.2024"}
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
        </Stack__>
        {false ? (
          <Stack__
            as={"div"}
            data-plasmic-name={"cta"}
            data-plasmic-override={overrides.cta}
            hasGap={true}
            className={classNames(projectcss.all, sty.cta)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"btnStd"}
              data-plasmic-override={overrides.btnStd}
              hasGap={true}
              className={classNames(projectcss.all, sty.btnStd)}
            >
              <div
                data-plasmic-name={"label"}
                data-plasmic-override={overrides.label}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.label
                )}
              >
                {"CONTACT US"}
              </div>
              <Stack__
                as={PlasmicImg__}
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                hasGap={true}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"20px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"20px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/blank_website/images/icon.svg",
                  fullWidth: 20,
                  fullHeight: 20,
                  aspectRatio: 1
                }}
              />
            </Stack__>
          </Stack__>
        ) : null}
      </div>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <GCurvedCornerIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      </div>
      <Video
        data-plasmic-name={"htmlVideo"}
        data-plasmic-override={overrides.htmlVideo}
        autoPlay={true}
        className={classNames("__wab_instance", sty.htmlVideo)}
        controls={false}
        loop={true}
        muted={true}
        src={
          "https://maraweb.s3.amazonaws.com/1302-2024-MARA-Hype-Video-2024-Web_Cutdown-v02.mp4"
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  heroSection: [
    "heroSection",
    "homeHeroCard",
    "homeHeroTitleWrap",
    "title",
    "gLayoutDivider",
    "itemDivider",
    "overallFigureList",
    "overallFigureItem",
    "overallFigureText",
    "figure",
    "unitWrap",
    "unit",
    "gLayoutDivider2",
    "itemDivider2",
    "overallFigureContent",
    "titleGoesHere",
    "overallFigureDateWrap",
    "asOf",
    "date",
    "overallFigureItem2",
    "overallFigureText2",
    "figure2",
    "unitWrap2",
    "unit2",
    "gLayoutDivider3",
    "itemDivider3",
    "overallFigureContent2",
    "titleGoesHere2",
    "overallFigureDateWrap2",
    "asOf2",
    "date2",
    "overallFigureItem3",
    "overallFigureText3",
    "figure3",
    "unitWrap3",
    "unit3",
    "gLayoutDivider4",
    "itemDivider4",
    "overallFigureContent3",
    "titleGoesHere3",
    "overallFigureDateWrap3",
    "asOf3",
    "date3",
    "overallFigureItem4",
    "overallFigureText4",
    "figure4",
    "unitWrap4",
    "unit4",
    "gLayoutDivider5",
    "itemDivider5",
    "overallFigureContent4",
    "titleGoesHere4",
    "overallFigureDateWrap4",
    "asOf4",
    "date4",
    "cta",
    "btnStd",
    "label",
    "img",
    "freeBox",
    "svg",
    "htmlVideo"
  ],
  homeHeroCard: [
    "homeHeroCard",
    "homeHeroTitleWrap",
    "title",
    "gLayoutDivider",
    "itemDivider",
    "overallFigureList",
    "overallFigureItem",
    "overallFigureText",
    "figure",
    "unitWrap",
    "unit",
    "gLayoutDivider2",
    "itemDivider2",
    "overallFigureContent",
    "titleGoesHere",
    "overallFigureDateWrap",
    "asOf",
    "date",
    "overallFigureItem2",
    "overallFigureText2",
    "figure2",
    "unitWrap2",
    "unit2",
    "gLayoutDivider3",
    "itemDivider3",
    "overallFigureContent2",
    "titleGoesHere2",
    "overallFigureDateWrap2",
    "asOf2",
    "date2",
    "overallFigureItem3",
    "overallFigureText3",
    "figure3",
    "unitWrap3",
    "unit3",
    "gLayoutDivider4",
    "itemDivider4",
    "overallFigureContent3",
    "titleGoesHere3",
    "overallFigureDateWrap3",
    "asOf3",
    "date3",
    "overallFigureItem4",
    "overallFigureText4",
    "figure4",
    "unitWrap4",
    "unit4",
    "gLayoutDivider5",
    "itemDivider5",
    "overallFigureContent4",
    "titleGoesHere4",
    "overallFigureDateWrap4",
    "asOf4",
    "date4",
    "cta",
    "btnStd",
    "label",
    "img"
  ],
  homeHeroTitleWrap: ["homeHeroTitleWrap", "title"],
  title: ["title"],
  gLayoutDivider: ["gLayoutDivider", "itemDivider"],
  itemDivider: ["itemDivider"],
  overallFigureList: [
    "overallFigureList",
    "overallFigureItem",
    "overallFigureText",
    "figure",
    "unitWrap",
    "unit",
    "gLayoutDivider2",
    "itemDivider2",
    "overallFigureContent",
    "titleGoesHere",
    "overallFigureDateWrap",
    "asOf",
    "date",
    "overallFigureItem2",
    "overallFigureText2",
    "figure2",
    "unitWrap2",
    "unit2",
    "gLayoutDivider3",
    "itemDivider3",
    "overallFigureContent2",
    "titleGoesHere2",
    "overallFigureDateWrap2",
    "asOf2",
    "date2",
    "overallFigureItem3",
    "overallFigureText3",
    "figure3",
    "unitWrap3",
    "unit3",
    "gLayoutDivider4",
    "itemDivider4",
    "overallFigureContent3",
    "titleGoesHere3",
    "overallFigureDateWrap3",
    "asOf3",
    "date3",
    "overallFigureItem4",
    "overallFigureText4",
    "figure4",
    "unitWrap4",
    "unit4",
    "gLayoutDivider5",
    "itemDivider5",
    "overallFigureContent4",
    "titleGoesHere4",
    "overallFigureDateWrap4",
    "asOf4",
    "date4"
  ],
  overallFigureItem: [
    "overallFigureItem",
    "overallFigureText",
    "figure",
    "unitWrap",
    "unit",
    "gLayoutDivider2",
    "itemDivider2",
    "overallFigureContent",
    "titleGoesHere",
    "overallFigureDateWrap",
    "asOf",
    "date"
  ],
  overallFigureText: ["overallFigureText", "figure", "unitWrap", "unit"],
  figure: ["figure"],
  unitWrap: ["unitWrap", "unit"],
  unit: ["unit"],
  gLayoutDivider2: ["gLayoutDivider2", "itemDivider2"],
  itemDivider2: ["itemDivider2"],
  overallFigureContent: [
    "overallFigureContent",
    "titleGoesHere",
    "overallFigureDateWrap",
    "asOf",
    "date"
  ],
  titleGoesHere: ["titleGoesHere"],
  overallFigureDateWrap: ["overallFigureDateWrap", "asOf", "date"],
  asOf: ["asOf"],
  date: ["date"],
  overallFigureItem2: [
    "overallFigureItem2",
    "overallFigureText2",
    "figure2",
    "unitWrap2",
    "unit2",
    "gLayoutDivider3",
    "itemDivider3",
    "overallFigureContent2",
    "titleGoesHere2",
    "overallFigureDateWrap2",
    "asOf2",
    "date2"
  ],
  overallFigureText2: ["overallFigureText2", "figure2", "unitWrap2", "unit2"],
  figure2: ["figure2"],
  unitWrap2: ["unitWrap2", "unit2"],
  unit2: ["unit2"],
  gLayoutDivider3: ["gLayoutDivider3", "itemDivider3"],
  itemDivider3: ["itemDivider3"],
  overallFigureContent2: [
    "overallFigureContent2",
    "titleGoesHere2",
    "overallFigureDateWrap2",
    "asOf2",
    "date2"
  ],
  titleGoesHere2: ["titleGoesHere2"],
  overallFigureDateWrap2: ["overallFigureDateWrap2", "asOf2", "date2"],
  asOf2: ["asOf2"],
  date2: ["date2"],
  overallFigureItem3: [
    "overallFigureItem3",
    "overallFigureText3",
    "figure3",
    "unitWrap3",
    "unit3",
    "gLayoutDivider4",
    "itemDivider4",
    "overallFigureContent3",
    "titleGoesHere3",
    "overallFigureDateWrap3",
    "asOf3",
    "date3"
  ],
  overallFigureText3: ["overallFigureText3", "figure3", "unitWrap3", "unit3"],
  figure3: ["figure3"],
  unitWrap3: ["unitWrap3", "unit3"],
  unit3: ["unit3"],
  gLayoutDivider4: ["gLayoutDivider4", "itemDivider4"],
  itemDivider4: ["itemDivider4"],
  overallFigureContent3: [
    "overallFigureContent3",
    "titleGoesHere3",
    "overallFigureDateWrap3",
    "asOf3",
    "date3"
  ],
  titleGoesHere3: ["titleGoesHere3"],
  overallFigureDateWrap3: ["overallFigureDateWrap3", "asOf3", "date3"],
  asOf3: ["asOf3"],
  date3: ["date3"],
  overallFigureItem4: [
    "overallFigureItem4",
    "overallFigureText4",
    "figure4",
    "unitWrap4",
    "unit4",
    "gLayoutDivider5",
    "itemDivider5",
    "overallFigureContent4",
    "titleGoesHere4",
    "overallFigureDateWrap4",
    "asOf4",
    "date4"
  ],
  overallFigureText4: ["overallFigureText4", "figure4", "unitWrap4", "unit4"],
  figure4: ["figure4"],
  unitWrap4: ["unitWrap4", "unit4"],
  unit4: ["unit4"],
  gLayoutDivider5: ["gLayoutDivider5", "itemDivider5"],
  itemDivider5: ["itemDivider5"],
  overallFigureContent4: [
    "overallFigureContent4",
    "titleGoesHere4",
    "overallFigureDateWrap4",
    "asOf4",
    "date4"
  ],
  titleGoesHere4: ["titleGoesHere4"],
  overallFigureDateWrap4: ["overallFigureDateWrap4", "asOf4", "date4"],
  asOf4: ["asOf4"],
  date4: ["date4"],
  cta: ["cta", "btnStd", "label", "img"],
  btnStd: ["btnStd", "label", "img"],
  label: ["label"],
  img: ["img"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"],
  htmlVideo: ["htmlVideo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  heroSection: "div";
  homeHeroCard: "div";
  homeHeroTitleWrap: "div";
  title: "div";
  gLayoutDivider: "div";
  itemDivider: "div";
  overallFigureList: "div";
  overallFigureItem: "div";
  overallFigureText: "div";
  figure: "div";
  unitWrap: "div";
  unit: "div";
  gLayoutDivider2: "div";
  itemDivider2: "div";
  overallFigureContent: "div";
  titleGoesHere: "div";
  overallFigureDateWrap: "div";
  asOf: "div";
  date: "div";
  overallFigureItem2: "div";
  overallFigureText2: "div";
  figure2: "div";
  unitWrap2: "div";
  unit2: "div";
  gLayoutDivider3: "div";
  itemDivider3: "div";
  overallFigureContent2: "div";
  titleGoesHere2: "div";
  overallFigureDateWrap2: "div";
  asOf2: "div";
  date2: "div";
  overallFigureItem3: "div";
  overallFigureText3: "div";
  figure3: "div";
  unitWrap3: "div";
  unit3: "div";
  gLayoutDivider4: "div";
  itemDivider4: "div";
  overallFigureContent3: "div";
  titleGoesHere3: "div";
  overallFigureDateWrap3: "div";
  asOf3: "div";
  date3: "div";
  overallFigureItem4: "div";
  overallFigureText4: "div";
  figure4: "div";
  unitWrap4: "div";
  unit4: "div";
  gLayoutDivider5: "div";
  itemDivider5: "div";
  overallFigureContent4: "div";
  titleGoesHere4: "div";
  overallFigureDateWrap4: "div";
  asOf4: "div";
  date4: "div";
  cta: "div";
  btnStd: "div";
  label: "div";
  img: typeof PlasmicImg__;
  freeBox: "div";
  svg: "svg";
  htmlVideo: typeof Video;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeroSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeroSection__VariantsArgs;
    args?: PlasmicHeroSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeroSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeroSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeroSection__ArgProps,
          internalVariantPropNames: PlasmicHeroSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeroSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "heroSection") {
    func.displayName = "PlasmicHeroSection";
  } else {
    func.displayName = `PlasmicHeroSection.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroSection = Object.assign(
  // Top-level PlasmicHeroSection renders the root element
  makeNodeComponent("heroSection"),
  {
    // Helper components rendering sub-elements
    homeHeroCard: makeNodeComponent("homeHeroCard"),
    homeHeroTitleWrap: makeNodeComponent("homeHeroTitleWrap"),
    title: makeNodeComponent("title"),
    gLayoutDivider: makeNodeComponent("gLayoutDivider"),
    itemDivider: makeNodeComponent("itemDivider"),
    overallFigureList: makeNodeComponent("overallFigureList"),
    overallFigureItem: makeNodeComponent("overallFigureItem"),
    overallFigureText: makeNodeComponent("overallFigureText"),
    figure: makeNodeComponent("figure"),
    unitWrap: makeNodeComponent("unitWrap"),
    unit: makeNodeComponent("unit"),
    gLayoutDivider2: makeNodeComponent("gLayoutDivider2"),
    itemDivider2: makeNodeComponent("itemDivider2"),
    overallFigureContent: makeNodeComponent("overallFigureContent"),
    titleGoesHere: makeNodeComponent("titleGoesHere"),
    overallFigureDateWrap: makeNodeComponent("overallFigureDateWrap"),
    asOf: makeNodeComponent("asOf"),
    date: makeNodeComponent("date"),
    overallFigureItem2: makeNodeComponent("overallFigureItem2"),
    overallFigureText2: makeNodeComponent("overallFigureText2"),
    figure2: makeNodeComponent("figure2"),
    unitWrap2: makeNodeComponent("unitWrap2"),
    unit2: makeNodeComponent("unit2"),
    gLayoutDivider3: makeNodeComponent("gLayoutDivider3"),
    itemDivider3: makeNodeComponent("itemDivider3"),
    overallFigureContent2: makeNodeComponent("overallFigureContent2"),
    titleGoesHere2: makeNodeComponent("titleGoesHere2"),
    overallFigureDateWrap2: makeNodeComponent("overallFigureDateWrap2"),
    asOf2: makeNodeComponent("asOf2"),
    date2: makeNodeComponent("date2"),
    overallFigureItem3: makeNodeComponent("overallFigureItem3"),
    overallFigureText3: makeNodeComponent("overallFigureText3"),
    figure3: makeNodeComponent("figure3"),
    unitWrap3: makeNodeComponent("unitWrap3"),
    unit3: makeNodeComponent("unit3"),
    gLayoutDivider4: makeNodeComponent("gLayoutDivider4"),
    itemDivider4: makeNodeComponent("itemDivider4"),
    overallFigureContent3: makeNodeComponent("overallFigureContent3"),
    titleGoesHere3: makeNodeComponent("titleGoesHere3"),
    overallFigureDateWrap3: makeNodeComponent("overallFigureDateWrap3"),
    asOf3: makeNodeComponent("asOf3"),
    date3: makeNodeComponent("date3"),
    overallFigureItem4: makeNodeComponent("overallFigureItem4"),
    overallFigureText4: makeNodeComponent("overallFigureText4"),
    figure4: makeNodeComponent("figure4"),
    unitWrap4: makeNodeComponent("unitWrap4"),
    unit4: makeNodeComponent("unit4"),
    gLayoutDivider5: makeNodeComponent("gLayoutDivider5"),
    itemDivider5: makeNodeComponent("itemDivider5"),
    overallFigureContent4: makeNodeComponent("overallFigureContent4"),
    titleGoesHere4: makeNodeComponent("titleGoesHere4"),
    overallFigureDateWrap4: makeNodeComponent("overallFigureDateWrap4"),
    asOf4: makeNodeComponent("asOf4"),
    date4: makeNodeComponent("date4"),
    cta: makeNodeComponent("cta"),
    btnStd: makeNodeComponent("btnStd"),
    label: makeNodeComponent("label"),
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    htmlVideo: makeNodeComponent("htmlVideo"),

    // Metadata about props expected for PlasmicHeroSection
    internalVariantProps: PlasmicHeroSection__VariantProps,
    internalArgProps: PlasmicHeroSection__ArgProps
  }
);

export default PlasmicHeroSection;
/* prettier-ignore-end */
