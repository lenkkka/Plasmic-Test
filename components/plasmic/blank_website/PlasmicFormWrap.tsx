/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6GgaEV8wA3NAjSPNQQE37W
// Component: xRTHJhz9VfiN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: WFxcD-A0CuVm/component
import BtnWrp from "../../BtnWrp"; // plasmic-import: FfPpxlM_Ttcg/component

import { useScreenVariants as useScreenVariants_19VDikmmmbc3 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 19vDIKMMMBC3/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6GgaEV8wA3NAjSPNQQE37W/projectcss
import sty from "./PlasmicFormWrap.module.css"; // plasmic-import: xRTHJhz9VfiN/css

createPlasmicElementProxy;

export type PlasmicFormWrap__VariantMembers = {};
export type PlasmicFormWrap__VariantsArgs = {};
type VariantPropType = keyof PlasmicFormWrap__VariantsArgs;
export const PlasmicFormWrap__VariantProps = new Array<VariantPropType>();

export type PlasmicFormWrap__ArgsType = { title?: string; subtitle?: string };
type ArgPropType = keyof PlasmicFormWrap__ArgsType;
export const PlasmicFormWrap__ArgProps = new Array<ArgPropType>(
  "title",
  "subtitle"
);

export type PlasmicFormWrap__OverridesType = {
  formWrap?: Flex__<"div">;
  column?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  ctaSplitLeft?: Flex__<"div">;
  ctaTitle?: Flex__<"div">;
  ctaText?: Flex__<"div">;
  ctaContain?: Flex__<"div">;
  ctaSplitRight?: Flex__<"div">;
  formInput?: Flex__<"div">;
  ctaText2?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  formRow?: Flex__<"div">;
  ctaText3?: Flex__<"div">;
  btnWrp?: Flex__<typeof BtnWrp>;
};

export interface DefaultFormWrapProps {
  title?: string;
  subtitle?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFormWrap__RenderFunc(props: {
  variants: PlasmicFormWrap__VariantsArgs;
  args: PlasmicFormWrap__ArgsType;
  overrides: PlasmicFormWrap__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "Text",
          subtitle: "text"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_19VDikmmmbc3()
  });

  return (
    <div
      data-plasmic-name={"formWrap"}
      data-plasmic-override={overrides.formWrap}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.formWrap
      )}
    >
      <div
        data-plasmic-name={"column"}
        data-plasmic-override={overrides.column}
        className={classNames(projectcss.all, sty.column)}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"ctaSplitLeft"}
            data-plasmic-override={overrides.ctaSplitLeft}
            hasGap={true}
            className={classNames(projectcss.all, sty.ctaSplitLeft)}
          >
            <div
              data-plasmic-name={"ctaTitle"}
              data-plasmic-override={overrides.ctaTitle}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.ctaTitle
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Text";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"ctaText"}
              data-plasmic-override={overrides.ctaText}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.ctaText
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.subtitle;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Text";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"ctaContain"}
            data-plasmic-override={overrides.ctaContain}
            hasGap={true}
            className={classNames(projectcss.all, sty.ctaContain)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"ctaSplitRight"}
              data-plasmic-override={overrides.ctaSplitRight}
              hasGap={true}
              className={classNames(projectcss.all, sty.ctaSplitRight)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"formInput"}
                data-plasmic-override={overrides.formInput}
                hasGap={true}
                className={classNames(projectcss.all, sty.formInput)}
              >
                <div
                  data-plasmic-name={"ctaText2"}
                  data-plasmic-override={overrides.ctaText2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.ctaText2
                  )}
                >
                  {"Field Title:"}
                </div>
                <TextInput
                  data-plasmic-name={"textInput"}
                  data-plasmic-override={overrides.textInput}
                  className={classNames("__wab_instance", sty.textInput)}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "textInput",
                      "value"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  placeholder={"Placeholder text goes here"}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"formRow"}
                data-plasmic-override={overrides.formRow}
                hasGap={true}
                className={classNames(projectcss.all, sty.formRow)}
              >
                <div
                  data-plasmic-name={"ctaText3"}
                  data-plasmic-override={overrides.ctaText3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.ctaText3
                  )}
                >
                  {
                    "By subscribing, you consent to the terms set forth in our Privacy Policy."
                  }
                </div>
                <BtnWrp
                  data-plasmic-name={"btnWrp"}
                  data-plasmic-override={overrides.btnWrp}
                  className={classNames("__wab_instance", sty.btnWrp)}
                />
              </Stack__>
            </Stack__>
          </Stack__>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  formWrap: [
    "formWrap",
    "column",
    "freeBox",
    "ctaSplitLeft",
    "ctaTitle",
    "ctaText",
    "ctaContain",
    "ctaSplitRight",
    "formInput",
    "ctaText2",
    "textInput",
    "formRow",
    "ctaText3",
    "btnWrp"
  ],
  column: [
    "column",
    "freeBox",
    "ctaSplitLeft",
    "ctaTitle",
    "ctaText",
    "ctaContain",
    "ctaSplitRight",
    "formInput",
    "ctaText2",
    "textInput",
    "formRow",
    "ctaText3",
    "btnWrp"
  ],
  freeBox: [
    "freeBox",
    "ctaSplitLeft",
    "ctaTitle",
    "ctaText",
    "ctaContain",
    "ctaSplitRight",
    "formInput",
    "ctaText2",
    "textInput",
    "formRow",
    "ctaText3",
    "btnWrp"
  ],
  ctaSplitLeft: ["ctaSplitLeft", "ctaTitle", "ctaText"],
  ctaTitle: ["ctaTitle"],
  ctaText: ["ctaText"],
  ctaContain: [
    "ctaContain",
    "ctaSplitRight",
    "formInput",
    "ctaText2",
    "textInput",
    "formRow",
    "ctaText3",
    "btnWrp"
  ],
  ctaSplitRight: [
    "ctaSplitRight",
    "formInput",
    "ctaText2",
    "textInput",
    "formRow",
    "ctaText3",
    "btnWrp"
  ],
  formInput: ["formInput", "ctaText2", "textInput"],
  ctaText2: ["ctaText2"],
  textInput: ["textInput"],
  formRow: ["formRow", "ctaText3", "btnWrp"],
  ctaText3: ["ctaText3"],
  btnWrp: ["btnWrp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  formWrap: "div";
  column: "div";
  freeBox: "div";
  ctaSplitLeft: "div";
  ctaTitle: "div";
  ctaText: "div";
  ctaContain: "div";
  ctaSplitRight: "div";
  formInput: "div";
  ctaText2: "div";
  textInput: typeof TextInput;
  formRow: "div";
  ctaText3: "div";
  btnWrp: typeof BtnWrp;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormWrap__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormWrap__VariantsArgs;
    args?: PlasmicFormWrap__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFormWrap__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFormWrap__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormWrap__ArgProps,
          internalVariantPropNames: PlasmicFormWrap__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFormWrap__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "formWrap") {
    func.displayName = "PlasmicFormWrap";
  } else {
    func.displayName = `PlasmicFormWrap.${nodeName}`;
  }
  return func;
}

export const PlasmicFormWrap = Object.assign(
  // Top-level PlasmicFormWrap renders the root element
  makeNodeComponent("formWrap"),
  {
    // Helper components rendering sub-elements
    column: makeNodeComponent("column"),
    freeBox: makeNodeComponent("freeBox"),
    ctaSplitLeft: makeNodeComponent("ctaSplitLeft"),
    ctaTitle: makeNodeComponent("ctaTitle"),
    ctaText: makeNodeComponent("ctaText"),
    ctaContain: makeNodeComponent("ctaContain"),
    ctaSplitRight: makeNodeComponent("ctaSplitRight"),
    formInput: makeNodeComponent("formInput"),
    ctaText2: makeNodeComponent("ctaText2"),
    textInput: makeNodeComponent("textInput"),
    formRow: makeNodeComponent("formRow"),
    ctaText3: makeNodeComponent("ctaText3"),
    btnWrp: makeNodeComponent("btnWrp"),

    // Metadata about props expected for PlasmicFormWrap
    internalVariantProps: PlasmicFormWrap__VariantProps,
    internalArgProps: PlasmicFormWrap__ArgProps
  }
);

export default PlasmicFormWrap;
/* prettier-ignore-end */
