/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6GgaEV8wA3NAjSPNQQE37W
// Component: xRTHJhz9VfiN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SubscriptionForm from "../../SubscriptionForm"; // plasmic-import: NXy1tI1D044n/component

import { useScreenVariants as useScreenVariants_19VDikmmmbc3 } from "./PlasmicGlobalVariant__CloseStatesTabletMobile"; // plasmic-import: 19vDIKMMMBC3/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6GgaEV8wA3NAjSPNQQE37W/projectcss
import sty from "./PlasmicFormWrap.module.css"; // plasmic-import: xRTHJhz9VfiN/css

createPlasmicElementProxy;

export type PlasmicFormWrap__VariantMembers = {};
export type PlasmicFormWrap__VariantsArgs = {};
type VariantPropType = keyof PlasmicFormWrap__VariantsArgs;
export const PlasmicFormWrap__VariantProps = new Array<VariantPropType>();

export type PlasmicFormWrap__ArgsType = { title?: string; subtitle?: string };
type ArgPropType = keyof PlasmicFormWrap__ArgsType;
export const PlasmicFormWrap__ArgProps = new Array<ArgPropType>(
  "title",
  "subtitle"
);

export type PlasmicFormWrap__OverridesType = {
  formWrap?: Flex__<"div">;
  column?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  ctaSplitLeft?: Flex__<"div">;
  ctaTitle?: Flex__<"div">;
  ctaText?: Flex__<"div">;
  subscriptionForm?: Flex__<typeof SubscriptionForm>;
};

export interface DefaultFormWrapProps {
  title?: string;
  subtitle?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFormWrap__RenderFunc(props: {
  variants: PlasmicFormWrap__VariantsArgs;
  args: PlasmicFormWrap__ArgsType;
  overrides: PlasmicFormWrap__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "Text",
          subtitle: "text"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    closeStatesTabletMobile: useScreenVariants_19VDikmmmbc3()
  });

  return (
    <div
      data-plasmic-name={"formWrap"}
      data-plasmic-override={overrides.formWrap}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.formWrap
      )}
    >
      <div
        data-plasmic-name={"column"}
        data-plasmic-override={overrides.column}
        className={classNames(projectcss.all, sty.column)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"ctaSplitLeft"}
            data-plasmic-override={overrides.ctaSplitLeft}
            hasGap={true}
            className={classNames(projectcss.all, sty.ctaSplitLeft)}
          >
            <div
              data-plasmic-name={"ctaTitle"}
              data-plasmic-override={overrides.ctaTitle}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.ctaTitle
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Text";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"ctaText"}
              data-plasmic-override={overrides.ctaText}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.ctaText
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.subtitle;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Text";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          <SubscriptionForm
            data-plasmic-name={"subscriptionForm"}
            data-plasmic-override={overrides.subscriptionForm}
            className={classNames("__wab_instance", sty.subscriptionForm)}
          />
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  formWrap: [
    "formWrap",
    "column",
    "freeBox",
    "ctaSplitLeft",
    "ctaTitle",
    "ctaText",
    "subscriptionForm"
  ],
  column: [
    "column",
    "freeBox",
    "ctaSplitLeft",
    "ctaTitle",
    "ctaText",
    "subscriptionForm"
  ],
  freeBox: [
    "freeBox",
    "ctaSplitLeft",
    "ctaTitle",
    "ctaText",
    "subscriptionForm"
  ],
  ctaSplitLeft: ["ctaSplitLeft", "ctaTitle", "ctaText"],
  ctaTitle: ["ctaTitle"],
  ctaText: ["ctaText"],
  subscriptionForm: ["subscriptionForm"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  formWrap: "div";
  column: "div";
  freeBox: "div";
  ctaSplitLeft: "div";
  ctaTitle: "div";
  ctaText: "div";
  subscriptionForm: typeof SubscriptionForm;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormWrap__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormWrap__VariantsArgs;
    args?: PlasmicFormWrap__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFormWrap__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFormWrap__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormWrap__ArgProps,
          internalVariantPropNames: PlasmicFormWrap__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFormWrap__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "formWrap") {
    func.displayName = "PlasmicFormWrap";
  } else {
    func.displayName = `PlasmicFormWrap.${nodeName}`;
  }
  return func;
}

export const PlasmicFormWrap = Object.assign(
  // Top-level PlasmicFormWrap renders the root element
  makeNodeComponent("formWrap"),
  {
    // Helper components rendering sub-elements
    column: makeNodeComponent("column"),
    freeBox: makeNodeComponent("freeBox"),
    ctaSplitLeft: makeNodeComponent("ctaSplitLeft"),
    ctaTitle: makeNodeComponent("ctaTitle"),
    ctaText: makeNodeComponent("ctaText"),
    subscriptionForm: makeNodeComponent("subscriptionForm"),

    // Metadata about props expected for PlasmicFormWrap
    internalVariantProps: PlasmicFormWrap__VariantProps,
    internalArgProps: PlasmicFormWrap__ArgProps
  }
);

export default PlasmicFormWrap;
/* prettier-ignore-end */
