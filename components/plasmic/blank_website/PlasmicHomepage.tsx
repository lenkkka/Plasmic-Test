/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6GgaEV8wA3NAjSPNQQE37W
// Component: H1CWy2aw37Fp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: PAg8waIYOX54/component
import HeroSection from "../../HeroSection"; // plasmic-import: mbkly9G2X3L1/component
import LayoutFullWrap from "../../LayoutFullWrap"; // plasmic-import: _V8L3SCxePZg/component
import ButtonMainOutline from "../../ButtonMainOutline"; // plasmic-import: pZPvFfGgHk8v/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import PostCard from "../../PostCard"; // plasmic-import: MM70zhLV8m-d/component
import { SanityFetcher } from "@plasmicpkgs/plasmic-sanity-io";
import { SanityField } from "@plasmicpkgs/plasmic-sanity-io";
import TechnologyCard from "../../TechnologyCard"; // plasmic-import: Xv-_qi6rIvF7/component
import FormWrap from "../../FormWrap"; // plasmic-import: xRTHJhz9VfiN/component
import Footer from "../../Footer"; // plasmic-import: 4Ad_NJbeLZ66/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_19VDikmmmbc3 } from "./PlasmicGlobalVariant__CloseStatesTabletMobile"; // plasmic-import: 19vDIKMMMBC3/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6GgaEV8wA3NAjSPNQQE37W/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: H1CWy2aw37Fp/css

import GCurvedCornerIcon from "./icons/PlasmicIcon__GCurvedCorner"; // plasmic-import: xBHjxIupafBj/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  homeDevelopmentComponents?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  heroSection?: Flex__<typeof HeroSection>;
  layoutFullWrap?: Flex__<typeof LayoutFullWrap>;
  layoutSplitWrap?: Flex__<"div">;
  layoutContain?: Flex__<"div">;
  layoutSplitList?: Flex__<"div">;
  cardPhoto?: Flex__<"div">;
  cardPhotoTopRow?: Flex__<"div">;
  cardPhotoVisualWrap?: Flex__<"div">;
  placeholder?: Flex__<"div">;
  cardPhotoContent?: Flex__<"div">;
  layoutSplitTitle?: Flex__<"div">;
  gLayoutDivider?: Flex__<"div">;
  itemDivider?: Flex__<"div">;
  layoutSplitText?: Flex__<"div">;
  cardPhoto2?: Flex__<"div">;
  cardPhotoTopRow2?: Flex__<"div">;
  cardPhotoVisualWrap2?: Flex__<"div">;
  placeholder2?: Flex__<"div">;
  cardPhotoContent2?: Flex__<"div">;
  layoutSplitTitle2?: Flex__<"div">;
  gLayoutDivider2?: Flex__<"div">;
  itemDivider2?: Flex__<"div">;
  layoutSplitText2?: Flex__<"div">;
  layoutFullWrap2?: Flex__<"div">;
  layoutFullContain2?: Flex__<"div">;
  svg?: Flex__<"svg">;
  layoutFullContentWrap2?: Flex__<"div">;
  layoutFullContent2?: Flex__<"div">;
  title2?: Flex__<"div">;
  v03Divider2?: Flex__<"div">;
  hr2?: Flex__<"div">;
  text2?: Flex__<"div">;
  sectionMediaWrap?: Flex__<"div">;
  mediaContain?: Flex__<"div">;
  gEyebrowWrap?: Flex__<"div">;
  frame101692?: Flex__<"div">;
  eyebrowText?: Flex__<"div">;
  mediaList?: Flex__<"div">;
  cmsDataFetcher?: Flex__<typeof CmsQueryRepeater>;
  postCard?: Flex__<typeof PostCard>;
  sanityFetcher?: Flex__<typeof SanityFetcher>;
  solutionsWrap?: Flex__<"div">;
  solutionsContain?: Flex__<"div">;
  gEyebrowWrap2?: Flex__<"div">;
  frame101693?: Flex__<"div">;
  eyebrowText2?: Flex__<"div">;
  solutionsList2?: Flex__<"div">;
  formWrap?: Flex__<typeof FormWrap>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    closeStatesTabletMobile: useScreenVariants_19VDikmmmbc3()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"homeDevelopmentComponents"}
            data-plasmic-override={overrides.homeDevelopmentComponents}
            className={classNames(
              projectcss.all,
              sty.homeDevelopmentComponents
            )}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />

            <HeroSection
              data-plasmic-name={"heroSection"}
              data-plasmic-override={overrides.heroSection}
              className={classNames("__wab_instance", sty.heroSection)}
              heroTitle={
                "Leveraging digital asset compute to support the energy transformation"
              }
            />

            <div className={classNames(projectcss.all, sty.freeBox___0VSyX)} />

            <LayoutFullWrap
              data-plasmic-name={"layoutFullWrap"}
              data-plasmic-override={overrides.layoutFullWrap}
              className={classNames("__wab_instance", sty.layoutFullWrap)}
              sectionContent={
                "MARA (NASDAQ:MARA) is a global leader in digital asset compute that develops and deploys innovative technologies to build a more sustainable and inclusive future. MARA secures the world\u2019s preeminent blockchain ledger and supports the energy transformation by converting clean, stranded, or otherwise underutilized energy into economic value."
              }
              sectionTitle={"The MARA Difference"}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"layoutSplitWrap"}
              data-plasmic-override={overrides.layoutSplitWrap}
              hasGap={true}
              className={classNames(projectcss.all, sty.layoutSplitWrap)}
            >
              <div
                data-plasmic-name={"layoutContain"}
                data-plasmic-override={overrides.layoutContain}
                className={classNames(projectcss.all, sty.layoutContain)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"layoutSplitList"}
                  data-plasmic-override={overrides.layoutSplitList}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.layoutSplitList)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"cardPhoto"}
                    data-plasmic-override={overrides.cardPhoto}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.cardPhoto)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"cardPhotoTopRow"}
                      data-plasmic-override={overrides.cardPhotoTopRow}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.cardPhotoTopRow
                      )}
                    >
                      <div
                        data-plasmic-name={"cardPhotoVisualWrap"}
                        data-plasmic-override={overrides.cardPhotoVisualWrap}
                        className={classNames(
                          projectcss.all,
                          sty.cardPhotoVisualWrap
                        )}
                      >
                        <div
                          data-plasmic-name={"placeholder"}
                          data-plasmic-override={overrides.placeholder}
                          className={classNames(
                            projectcss.all,
                            sty.placeholder
                          )}
                        />
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"cardPhotoContent"}
                        data-plasmic-override={overrides.cardPhotoContent}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.cardPhotoContent
                        )}
                      >
                        <div
                          data-plasmic-name={"layoutSplitTitle"}
                          data-plasmic-override={overrides.layoutSplitTitle}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.layoutSplitTitle
                          )}
                        >
                          {"Operations"}
                        </div>
                        <div
                          data-plasmic-name={"gLayoutDivider"}
                          data-plasmic-override={overrides.gLayoutDivider}
                          className={classNames(
                            projectcss.all,
                            sty.gLayoutDivider
                          )}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"itemDivider"}
                            data-plasmic-override={overrides.itemDivider}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.itemDivider
                            )}
                          />
                        </div>
                        <div
                          data-plasmic-name={"layoutSplitText"}
                          data-plasmic-override={overrides.layoutSplitText}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.layoutSplitText
                          )}
                        >
                          {
                            "Our digital asset compute portfolio spans multiple states and countries. We manage large grid-connected deployments that reduce energy waste and inefficiencies, as well as small, dispersed deployments that transform stranded or wasted energy resources into more productive and sustainable assets. At MARA, we excel in optimizing energy use on a global scale."
                          }
                        </div>
                      </Stack__>
                    </Stack__>
                    <ButtonMainOutline
                      className={classNames(
                        "__wab_instance",
                        sty.buttonMainOutline__mSsW
                      )}
                      ctaText={"Learn More"}
                    />
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"cardPhoto2"}
                    data-plasmic-override={overrides.cardPhoto2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.cardPhoto2)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"cardPhotoTopRow2"}
                      data-plasmic-override={overrides.cardPhotoTopRow2}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.cardPhotoTopRow2
                      )}
                    >
                      <div
                        data-plasmic-name={"cardPhotoVisualWrap2"}
                        data-plasmic-override={overrides.cardPhotoVisualWrap2}
                        className={classNames(
                          projectcss.all,
                          sty.cardPhotoVisualWrap2
                        )}
                      >
                        <div
                          data-plasmic-name={"placeholder2"}
                          data-plasmic-override={overrides.placeholder2}
                          className={classNames(
                            projectcss.all,
                            sty.placeholder2
                          )}
                        />
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"cardPhotoContent2"}
                        data-plasmic-override={overrides.cardPhotoContent2}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.cardPhotoContent2
                        )}
                      >
                        <div
                          data-plasmic-name={"layoutSplitTitle2"}
                          data-plasmic-override={overrides.layoutSplitTitle2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.layoutSplitTitle2
                          )}
                        >
                          {"Investors"}
                        </div>
                        <div
                          data-plasmic-name={"gLayoutDivider2"}
                          data-plasmic-override={overrides.gLayoutDivider2}
                          className={classNames(
                            projectcss.all,
                            sty.gLayoutDivider2
                          )}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"itemDivider2"}
                            data-plasmic-override={overrides.itemDivider2}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.itemDivider2
                            )}
                          />
                        </div>
                        <div
                          data-plasmic-name={"layoutSplitText2"}
                          data-plasmic-override={overrides.layoutSplitText2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.layoutSplitText2
                          )}
                        >
                          {
                            "MARA is a publicly traded company (NASDAQ: MARA). Our investor relations website includes detailed information on our financial performance, our latest corporate updates, SEC filings, and more."
                          }
                        </div>
                      </Stack__>
                    </Stack__>
                    <ButtonMainOutline
                      className={classNames(
                        "__wab_instance",
                        sty.buttonMainOutline__qdLy
                      )}
                      ctaText={"Learn More"}
                    />
                  </Stack__>
                </Stack__>
              </div>
            </Stack__>
            <div
              data-plasmic-name={"layoutFullWrap2"}
              data-plasmic-override={overrides.layoutFullWrap2}
              className={classNames(projectcss.all, sty.layoutFullWrap2)}
            >
              <div
                data-plasmic-name={"layoutFullContain2"}
                data-plasmic-override={overrides.layoutFullContain2}
                className={classNames(projectcss.all, sty.layoutFullContain2)}
              >
                <GCurvedCornerIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <Stack__
                  as={"div"}
                  data-plasmic-name={"layoutFullContentWrap2"}
                  data-plasmic-override={overrides.layoutFullContentWrap2}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.layoutFullContentWrap2
                  )}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"layoutFullContent2"}
                    data-plasmic-override={overrides.layoutFullContent2}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.layoutFullContent2
                    )}
                  >
                    <div
                      data-plasmic-name={"title2"}
                      data-plasmic-override={overrides.title2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title2
                      )}
                    >
                      {"Partner with MARA"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"v03Divider2"}
                      data-plasmic-override={overrides.v03Divider2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.v03Divider2)}
                    >
                      <div
                        data-plasmic-name={"hr2"}
                        data-plasmic-override={overrides.hr2}
                        className={classNames(projectcss.all, sty.hr2)}
                      />
                    </Stack__>
                    <div
                      data-plasmic-name={"text2"}
                      data-plasmic-override={overrides.text2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text2
                      )}
                    >
                      {
                        "Our technologies empower energy companies, nation-states, and institutions to accelerate the energy transformation. By deploying highly adaptable, flexible, and scalable data centers, we help optimize unused or underutilized energy. Partner with us to leverage our unique expertise in data center operations. Together, let\u2019s build a more sustainable and inclusive future."
                      }
                    </div>
                  </Stack__>
                  <ButtonMainOutline
                    className={classNames(
                      "__wab_instance",
                      sty.buttonMainOutline__qCIc6
                    )}
                    ctaText={"Learn More"}
                  />
                </Stack__>
              </div>
            </div>
            <div
              data-plasmic-name={"sectionMediaWrap"}
              data-plasmic-override={overrides.sectionMediaWrap}
              className={classNames(projectcss.all, sty.sectionMediaWrap)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"mediaContain"}
                data-plasmic-override={overrides.mediaContain}
                hasGap={true}
                className={classNames(projectcss.all, sty.mediaContain)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"gEyebrowWrap"}
                  data-plasmic-override={overrides.gEyebrowWrap}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.gEyebrowWrap)}
                >
                  <div
                    data-plasmic-name={"frame101692"}
                    data-plasmic-override={overrides.frame101692}
                    className={classNames(projectcss.all, sty.frame101692)}
                  />

                  <div
                    data-plasmic-name={"eyebrowText"}
                    data-plasmic-override={overrides.eyebrowText}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.eyebrowText
                    )}
                  >
                    {"media"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"mediaList"}
                  data-plasmic-override={overrides.mediaList}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.mediaList)}
                >
                  <CmsQueryRepeater
                    data-plasmic-name={"cmsDataFetcher"}
                    data-plasmic-override={overrides.cmsDataFetcher}
                    className={classNames("__wab_instance", sty.cmsDataFetcher)}
                    desc={false}
                    emptyMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qli0D
                            )}
                          >
                            {"No matching published entries found."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    forceEmptyState={false}
                    forceLoadingState={false}
                    limit={0}
                    loadingMessage={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__j84Qr
                            )}
                          >
                            {"Loading..."}
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                    noAutoRepeat={false}
                    noLayout={false}
                    table={"maraPostItems"}
                    useDraft={false}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <PostCard
                          data-plasmic-name={"postCard"}
                          data-plasmic-override={overrides.postCard}
                          className={classNames("__wab_instance", sty.postCard)}
                        />
                      )}
                    </DataCtxReader__>
                  </CmsQueryRepeater>
                  <SanityFetcher
                    data-plasmic-name={"sanityFetcher"}
                    data-plasmic-override={overrides.sanityFetcher}
                    className={classNames("__wab_instance", sty.sanityFetcher)}
                    docType={"post"}
                    noAutoRepeat={false}
                    noLayout={false}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b1Cbb
                          )}
                        >
                          <SanityField
                            className={classNames(
                              "__wab_instance",
                              sty.sanityField__e1Oo3
                            )}
                            field={"mainImage"}
                          />

                          <SanityField
                            className={classNames(
                              "__wab_instance",
                              sty.sanityField___2Qvx
                            )}
                            field={"title"}
                          />
                        </Stack__>
                      )}
                    </DataCtxReader__>
                  </SanityFetcher>
                </Stack__>
              </Stack__>
            </div>
            <div
              data-plasmic-name={"solutionsWrap"}
              data-plasmic-override={overrides.solutionsWrap}
              className={classNames(projectcss.all, sty.solutionsWrap)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"solutionsContain"}
                data-plasmic-override={overrides.solutionsContain}
                hasGap={true}
                className={classNames(projectcss.all, sty.solutionsContain)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"gEyebrowWrap2"}
                  data-plasmic-override={overrides.gEyebrowWrap2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.gEyebrowWrap2)}
                >
                  <div
                    data-plasmic-name={"frame101693"}
                    data-plasmic-override={overrides.frame101693}
                    className={classNames(projectcss.all, sty.frame101693)}
                  />

                  <div
                    data-plasmic-name={"eyebrowText2"}
                    data-plasmic-override={overrides.eyebrowText2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.eyebrowText2
                    )}
                  >
                    {"Technology"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"solutionsList2"}
                  data-plasmic-override={overrides.solutionsList2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.solutionsList2)}
                >
                  <TechnologyCard
                    cards={["_2Pic"]}
                    className={classNames(
                      "__wab_instance",
                      sty.technologyCard__zxQdX
                    )}
                  />

                  <TechnologyCard
                    cards={["marafw"]}
                    className={classNames(
                      "__wab_instance",
                      sty.technologyCard__o2Qu
                    )}
                  />

                  <TechnologyCard
                    cards={["slipstream"]}
                    className={classNames(
                      "__wab_instance",
                      sty.technologyCard__nIii
                    )}
                  />

                  <TechnologyCard
                    cards={["anduro"]}
                    className={classNames(
                      "__wab_instance",
                      sty.technologyCard___6Vyvc
                    )}
                  />

                  <TechnologyCard
                    cards={["alys"]}
                    className={classNames(
                      "__wab_instance",
                      sty.technologyCard__r18Pp
                    )}
                  />

                  <TechnologyCard
                    cards={["coordinate"]}
                    className={classNames(
                      "__wab_instance",
                      sty.technologyCard__iiZpO
                    )}
                  />
                </Stack__>
              </Stack__>
            </div>
            <FormWrap
              data-plasmic-name={"formWrap"}
              data-plasmic-override={overrides.formWrap}
              className={classNames("__wab_instance", sty.formWrap)}
              subtitle={
                "Sign up for our newsletter and stay up to date on all things MARA."
              }
              title={"Be the First to Know"}
            />

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "homeDevelopmentComponents",
    "navbar",
    "heroSection",
    "layoutFullWrap",
    "layoutSplitWrap",
    "layoutContain",
    "layoutSplitList",
    "cardPhoto",
    "cardPhotoTopRow",
    "cardPhotoVisualWrap",
    "placeholder",
    "cardPhotoContent",
    "layoutSplitTitle",
    "gLayoutDivider",
    "itemDivider",
    "layoutSplitText",
    "cardPhoto2",
    "cardPhotoTopRow2",
    "cardPhotoVisualWrap2",
    "placeholder2",
    "cardPhotoContent2",
    "layoutSplitTitle2",
    "gLayoutDivider2",
    "itemDivider2",
    "layoutSplitText2",
    "layoutFullWrap2",
    "layoutFullContain2",
    "svg",
    "layoutFullContentWrap2",
    "layoutFullContent2",
    "title2",
    "v03Divider2",
    "hr2",
    "text2",
    "sectionMediaWrap",
    "mediaContain",
    "gEyebrowWrap",
    "frame101692",
    "eyebrowText",
    "mediaList",
    "cmsDataFetcher",
    "postCard",
    "sanityFetcher",
    "solutionsWrap",
    "solutionsContain",
    "gEyebrowWrap2",
    "frame101693",
    "eyebrowText2",
    "solutionsList2",
    "formWrap",
    "footer"
  ],
  homeDevelopmentComponents: [
    "homeDevelopmentComponents",
    "navbar",
    "heroSection",
    "layoutFullWrap",
    "layoutSplitWrap",
    "layoutContain",
    "layoutSplitList",
    "cardPhoto",
    "cardPhotoTopRow",
    "cardPhotoVisualWrap",
    "placeholder",
    "cardPhotoContent",
    "layoutSplitTitle",
    "gLayoutDivider",
    "itemDivider",
    "layoutSplitText",
    "cardPhoto2",
    "cardPhotoTopRow2",
    "cardPhotoVisualWrap2",
    "placeholder2",
    "cardPhotoContent2",
    "layoutSplitTitle2",
    "gLayoutDivider2",
    "itemDivider2",
    "layoutSplitText2",
    "layoutFullWrap2",
    "layoutFullContain2",
    "svg",
    "layoutFullContentWrap2",
    "layoutFullContent2",
    "title2",
    "v03Divider2",
    "hr2",
    "text2",
    "sectionMediaWrap",
    "mediaContain",
    "gEyebrowWrap",
    "frame101692",
    "eyebrowText",
    "mediaList",
    "cmsDataFetcher",
    "postCard",
    "sanityFetcher",
    "solutionsWrap",
    "solutionsContain",
    "gEyebrowWrap2",
    "frame101693",
    "eyebrowText2",
    "solutionsList2",
    "formWrap",
    "footer"
  ],
  navbar: ["navbar"],
  heroSection: ["heroSection"],
  layoutFullWrap: ["layoutFullWrap"],
  layoutSplitWrap: [
    "layoutSplitWrap",
    "layoutContain",
    "layoutSplitList",
    "cardPhoto",
    "cardPhotoTopRow",
    "cardPhotoVisualWrap",
    "placeholder",
    "cardPhotoContent",
    "layoutSplitTitle",
    "gLayoutDivider",
    "itemDivider",
    "layoutSplitText",
    "cardPhoto2",
    "cardPhotoTopRow2",
    "cardPhotoVisualWrap2",
    "placeholder2",
    "cardPhotoContent2",
    "layoutSplitTitle2",
    "gLayoutDivider2",
    "itemDivider2",
    "layoutSplitText2"
  ],
  layoutContain: [
    "layoutContain",
    "layoutSplitList",
    "cardPhoto",
    "cardPhotoTopRow",
    "cardPhotoVisualWrap",
    "placeholder",
    "cardPhotoContent",
    "layoutSplitTitle",
    "gLayoutDivider",
    "itemDivider",
    "layoutSplitText",
    "cardPhoto2",
    "cardPhotoTopRow2",
    "cardPhotoVisualWrap2",
    "placeholder2",
    "cardPhotoContent2",
    "layoutSplitTitle2",
    "gLayoutDivider2",
    "itemDivider2",
    "layoutSplitText2"
  ],
  layoutSplitList: [
    "layoutSplitList",
    "cardPhoto",
    "cardPhotoTopRow",
    "cardPhotoVisualWrap",
    "placeholder",
    "cardPhotoContent",
    "layoutSplitTitle",
    "gLayoutDivider",
    "itemDivider",
    "layoutSplitText",
    "cardPhoto2",
    "cardPhotoTopRow2",
    "cardPhotoVisualWrap2",
    "placeholder2",
    "cardPhotoContent2",
    "layoutSplitTitle2",
    "gLayoutDivider2",
    "itemDivider2",
    "layoutSplitText2"
  ],
  cardPhoto: [
    "cardPhoto",
    "cardPhotoTopRow",
    "cardPhotoVisualWrap",
    "placeholder",
    "cardPhotoContent",
    "layoutSplitTitle",
    "gLayoutDivider",
    "itemDivider",
    "layoutSplitText"
  ],
  cardPhotoTopRow: [
    "cardPhotoTopRow",
    "cardPhotoVisualWrap",
    "placeholder",
    "cardPhotoContent",
    "layoutSplitTitle",
    "gLayoutDivider",
    "itemDivider",
    "layoutSplitText"
  ],
  cardPhotoVisualWrap: ["cardPhotoVisualWrap", "placeholder"],
  placeholder: ["placeholder"],
  cardPhotoContent: [
    "cardPhotoContent",
    "layoutSplitTitle",
    "gLayoutDivider",
    "itemDivider",
    "layoutSplitText"
  ],
  layoutSplitTitle: ["layoutSplitTitle"],
  gLayoutDivider: ["gLayoutDivider", "itemDivider"],
  itemDivider: ["itemDivider"],
  layoutSplitText: ["layoutSplitText"],
  cardPhoto2: [
    "cardPhoto2",
    "cardPhotoTopRow2",
    "cardPhotoVisualWrap2",
    "placeholder2",
    "cardPhotoContent2",
    "layoutSplitTitle2",
    "gLayoutDivider2",
    "itemDivider2",
    "layoutSplitText2"
  ],
  cardPhotoTopRow2: [
    "cardPhotoTopRow2",
    "cardPhotoVisualWrap2",
    "placeholder2",
    "cardPhotoContent2",
    "layoutSplitTitle2",
    "gLayoutDivider2",
    "itemDivider2",
    "layoutSplitText2"
  ],
  cardPhotoVisualWrap2: ["cardPhotoVisualWrap2", "placeholder2"],
  placeholder2: ["placeholder2"],
  cardPhotoContent2: [
    "cardPhotoContent2",
    "layoutSplitTitle2",
    "gLayoutDivider2",
    "itemDivider2",
    "layoutSplitText2"
  ],
  layoutSplitTitle2: ["layoutSplitTitle2"],
  gLayoutDivider2: ["gLayoutDivider2", "itemDivider2"],
  itemDivider2: ["itemDivider2"],
  layoutSplitText2: ["layoutSplitText2"],
  layoutFullWrap2: [
    "layoutFullWrap2",
    "layoutFullContain2",
    "svg",
    "layoutFullContentWrap2",
    "layoutFullContent2",
    "title2",
    "v03Divider2",
    "hr2",
    "text2"
  ],
  layoutFullContain2: [
    "layoutFullContain2",
    "svg",
    "layoutFullContentWrap2",
    "layoutFullContent2",
    "title2",
    "v03Divider2",
    "hr2",
    "text2"
  ],
  svg: ["svg"],
  layoutFullContentWrap2: [
    "layoutFullContentWrap2",
    "layoutFullContent2",
    "title2",
    "v03Divider2",
    "hr2",
    "text2"
  ],
  layoutFullContent2: [
    "layoutFullContent2",
    "title2",
    "v03Divider2",
    "hr2",
    "text2"
  ],
  title2: ["title2"],
  v03Divider2: ["v03Divider2", "hr2"],
  hr2: ["hr2"],
  text2: ["text2"],
  sectionMediaWrap: [
    "sectionMediaWrap",
    "mediaContain",
    "gEyebrowWrap",
    "frame101692",
    "eyebrowText",
    "mediaList",
    "cmsDataFetcher",
    "postCard",
    "sanityFetcher"
  ],
  mediaContain: [
    "mediaContain",
    "gEyebrowWrap",
    "frame101692",
    "eyebrowText",
    "mediaList",
    "cmsDataFetcher",
    "postCard",
    "sanityFetcher"
  ],
  gEyebrowWrap: ["gEyebrowWrap", "frame101692", "eyebrowText"],
  frame101692: ["frame101692"],
  eyebrowText: ["eyebrowText"],
  mediaList: ["mediaList", "cmsDataFetcher", "postCard", "sanityFetcher"],
  cmsDataFetcher: ["cmsDataFetcher", "postCard"],
  postCard: ["postCard"],
  sanityFetcher: ["sanityFetcher"],
  solutionsWrap: [
    "solutionsWrap",
    "solutionsContain",
    "gEyebrowWrap2",
    "frame101693",
    "eyebrowText2",
    "solutionsList2"
  ],
  solutionsContain: [
    "solutionsContain",
    "gEyebrowWrap2",
    "frame101693",
    "eyebrowText2",
    "solutionsList2"
  ],
  gEyebrowWrap2: ["gEyebrowWrap2", "frame101693", "eyebrowText2"],
  frame101693: ["frame101693"],
  eyebrowText2: ["eyebrowText2"],
  solutionsList2: ["solutionsList2"],
  formWrap: ["formWrap"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  homeDevelopmentComponents: "div";
  navbar: typeof Navbar;
  heroSection: typeof HeroSection;
  layoutFullWrap: typeof LayoutFullWrap;
  layoutSplitWrap: "div";
  layoutContain: "div";
  layoutSplitList: "div";
  cardPhoto: "div";
  cardPhotoTopRow: "div";
  cardPhotoVisualWrap: "div";
  placeholder: "div";
  cardPhotoContent: "div";
  layoutSplitTitle: "div";
  gLayoutDivider: "div";
  itemDivider: "div";
  layoutSplitText: "div";
  cardPhoto2: "div";
  cardPhotoTopRow2: "div";
  cardPhotoVisualWrap2: "div";
  placeholder2: "div";
  cardPhotoContent2: "div";
  layoutSplitTitle2: "div";
  gLayoutDivider2: "div";
  itemDivider2: "div";
  layoutSplitText2: "div";
  layoutFullWrap2: "div";
  layoutFullContain2: "div";
  svg: "svg";
  layoutFullContentWrap2: "div";
  layoutFullContent2: "div";
  title2: "div";
  v03Divider2: "div";
  hr2: "div";
  text2: "div";
  sectionMediaWrap: "div";
  mediaContain: "div";
  gEyebrowWrap: "div";
  frame101692: "div";
  eyebrowText: "div";
  mediaList: "div";
  cmsDataFetcher: typeof CmsQueryRepeater;
  postCard: typeof PostCard;
  sanityFetcher: typeof SanityFetcher;
  solutionsWrap: "div";
  solutionsContain: "div";
  gEyebrowWrap2: "div";
  frame101693: "div";
  eyebrowText2: "div";
  solutionsList2: "div";
  formWrap: typeof FormWrap;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    homeDevelopmentComponents: makeNodeComponent("homeDevelopmentComponents"),
    navbar: makeNodeComponent("navbar"),
    heroSection: makeNodeComponent("heroSection"),
    layoutFullWrap: makeNodeComponent("layoutFullWrap"),
    layoutSplitWrap: makeNodeComponent("layoutSplitWrap"),
    layoutContain: makeNodeComponent("layoutContain"),
    layoutSplitList: makeNodeComponent("layoutSplitList"),
    cardPhoto: makeNodeComponent("cardPhoto"),
    cardPhotoTopRow: makeNodeComponent("cardPhotoTopRow"),
    cardPhotoVisualWrap: makeNodeComponent("cardPhotoVisualWrap"),
    placeholder: makeNodeComponent("placeholder"),
    cardPhotoContent: makeNodeComponent("cardPhotoContent"),
    layoutSplitTitle: makeNodeComponent("layoutSplitTitle"),
    gLayoutDivider: makeNodeComponent("gLayoutDivider"),
    itemDivider: makeNodeComponent("itemDivider"),
    layoutSplitText: makeNodeComponent("layoutSplitText"),
    cardPhoto2: makeNodeComponent("cardPhoto2"),
    cardPhotoTopRow2: makeNodeComponent("cardPhotoTopRow2"),
    cardPhotoVisualWrap2: makeNodeComponent("cardPhotoVisualWrap2"),
    placeholder2: makeNodeComponent("placeholder2"),
    cardPhotoContent2: makeNodeComponent("cardPhotoContent2"),
    layoutSplitTitle2: makeNodeComponent("layoutSplitTitle2"),
    gLayoutDivider2: makeNodeComponent("gLayoutDivider2"),
    itemDivider2: makeNodeComponent("itemDivider2"),
    layoutSplitText2: makeNodeComponent("layoutSplitText2"),
    layoutFullWrap2: makeNodeComponent("layoutFullWrap2"),
    layoutFullContain2: makeNodeComponent("layoutFullContain2"),
    svg: makeNodeComponent("svg"),
    layoutFullContentWrap2: makeNodeComponent("layoutFullContentWrap2"),
    layoutFullContent2: makeNodeComponent("layoutFullContent2"),
    title2: makeNodeComponent("title2"),
    v03Divider2: makeNodeComponent("v03Divider2"),
    hr2: makeNodeComponent("hr2"),
    text2: makeNodeComponent("text2"),
    sectionMediaWrap: makeNodeComponent("sectionMediaWrap"),
    mediaContain: makeNodeComponent("mediaContain"),
    gEyebrowWrap: makeNodeComponent("gEyebrowWrap"),
    frame101692: makeNodeComponent("frame101692"),
    eyebrowText: makeNodeComponent("eyebrowText"),
    mediaList: makeNodeComponent("mediaList"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    postCard: makeNodeComponent("postCard"),
    sanityFetcher: makeNodeComponent("sanityFetcher"),
    solutionsWrap: makeNodeComponent("solutionsWrap"),
    solutionsContain: makeNodeComponent("solutionsContain"),
    gEyebrowWrap2: makeNodeComponent("gEyebrowWrap2"),
    frame101693: makeNodeComponent("frame101693"),
    eyebrowText2: makeNodeComponent("eyebrowText2"),
    solutionsList2: makeNodeComponent("solutionsList2"),
    formWrap: makeNodeComponent("formWrap"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
