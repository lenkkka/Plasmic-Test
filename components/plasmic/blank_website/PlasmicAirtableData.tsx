/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6GgaEV8wA3NAjSPNQQE37W
// Component: Pg__fiCAmTSR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6GgaEV8wA3NAjSPNQQE37W/projectcss
import sty from "./PlasmicAirtableData.module.css"; // plasmic-import: Pg__fiCAmTSR/css

createPlasmicElementProxy;

export type PlasmicAirtableData__VariantMembers = {};
export type PlasmicAirtableData__VariantsArgs = {};
type VariantPropType = keyof PlasmicAirtableData__VariantsArgs;
export const PlasmicAirtableData__VariantProps = new Array<VariantPropType>();

export type PlasmicAirtableData__ArgsType = {};
type ArgPropType = keyof PlasmicAirtableData__ArgsType;
export const PlasmicAirtableData__ArgProps = new Array<ArgPropType>();

export type PlasmicAirtableData__OverridesType = {
  root?: Flex__<"div">;
  dataFetcher?: Flex__<typeof Fetcher>;
};

export interface DefaultAirtableDataProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAirtableData__RenderFunc(props: {
  variants: PlasmicAirtableData__VariantsArgs;
  args: PlasmicAirtableData__ArgsType;
  overrides: PlasmicAirtableData__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Fetcher
        data-plasmic-name={"dataFetcher"}
        data-plasmic-override={overrides.dataFetcher}
        dataOp={{
          sourceId: "iXUWeGRWCapAK64SA1ChkG",
          opId: "d9e0d7bd-5794-43d8-b3ae-fb8a93f63586",
          userArgs: {},
          cacheKey: `plasmic.$.gP9M3CTjKdi8.$.d9e0d7bd-5794-43d8-b3ae-fb8a93f63586.$.`,
          invalidatedKeys: null,
          roleId: null
        }}
        name={``}
        queries={{}}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "dataFetcher"],
  dataFetcher: ["dataFetcher"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dataFetcher: typeof Fetcher;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAirtableData__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAirtableData__VariantsArgs;
    args?: PlasmicAirtableData__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAirtableData__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAirtableData__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAirtableData__ArgProps,
          internalVariantPropNames: PlasmicAirtableData__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAirtableData__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAirtableData";
  } else {
    func.displayName = `PlasmicAirtableData.${nodeName}`;
  }
  return func;
}

export const PlasmicAirtableData = Object.assign(
  // Top-level PlasmicAirtableData renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dataFetcher: makeNodeComponent("dataFetcher"),

    // Metadata about props expected for PlasmicAirtableData
    internalVariantProps: PlasmicAirtableData__VariantProps,
    internalArgProps: PlasmicAirtableData__ArgProps
  }
);

export default PlasmicAirtableData;
/* prettier-ignore-end */
