/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6GgaEV8wA3NAjSPNQQE37W
// Component: Fvwf7HKIWogb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavDropdonList from "../../NavDropdonList"; // plasmic-import: -2e7Z4uIVPNy/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6GgaEV8wA3NAjSPNQQE37W/projectcss
import sty from "./PlasmicNavDropdown.module.css"; // plasmic-import: Fvwf7HKIWogb/css

import ChevronDownIconWrapIcon from "./icons/PlasmicIcon__ChevronDownIconWrap"; // plasmic-import: uBMHnK7097pW/icon

createPlasmicElementProxy;

export type PlasmicNavDropdown__VariantMembers = {};
export type PlasmicNavDropdown__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavDropdown__VariantsArgs;
export const PlasmicNavDropdown__VariantProps = new Array<VariantPropType>();

export type PlasmicNavDropdown__ArgsType = { navLinkContent?: string };
type ArgPropType = keyof PlasmicNavDropdown__ArgsType;
export const PlasmicNavDropdown__ArgProps = new Array<ArgPropType>(
  "navLinkContent"
);

export type PlasmicNavDropdown__OverridesType = {
  rollover?: Flex__<"div">;
  navItemDropdownList?: Flex__<"div">;
  navText?: Flex__<"div">;
  navIconWrap?: Flex__<"div">;
  svg?: Flex__<"svg">;
  navDropdonList?: Flex__<typeof NavDropdonList>;
};

export interface DefaultNavDropdownProps {
  navLinkContent?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavDropdown__RenderFunc(props: {
  variants: PlasmicNavDropdown__VariantsArgs;
  args: PlasmicNavDropdown__ArgsType;
  overrides: PlasmicNavDropdown__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          navLinkContent: "Link"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const [isRolloverHover, triggerRolloverHoverProps] = useTrigger(
    "useHover",
    {}
  );
  const [isRolloverNotHover, triggerRolloverNotHoverProps] = useTrigger(
    "useHover",
    {}
  );
  const triggers = {
    hover_rollover: isRolloverHover,
    notHover_rollover: !isRolloverNotHover
  };

  return (
    <div
      data-plasmic-name={"rollover"}
      data-plasmic-override={overrides.rollover}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.rollover
      )}
      onAnimationStart={async event => {
        const $steps = {};

        $steps["runElementAction"] = true
          ? (() => {
              const actionArgs = {};
              return (({ tplRef, action, args }) => {
                return $refs?.[tplRef]?.[action]?.(...(args ?? []));
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runElementAction"] != null &&
          typeof $steps["runElementAction"] === "object" &&
          typeof $steps["runElementAction"].then === "function"
        ) {
          $steps["runElementAction"] = await $steps["runElementAction"];
        }
      }}
      data-plasmic-trigger-props={[
        triggerRolloverHoverProps,
        triggerRolloverNotHoverProps
      ]}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"navItemDropdownList"}
        data-plasmic-override={overrides.navItemDropdownList}
        hasGap={true}
        className={classNames(projectcss.all, sty.navItemDropdownList)}
      >
        <div
          data-plasmic-name={"navText"}
          data-plasmic-override={overrides.navText}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.navText
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.navLinkContent;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "About us";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"navIconWrap"}
          data-plasmic-override={overrides.navIconWrap}
          hasGap={true}
          className={classNames(projectcss.all, sty.navIconWrap)}
        >
          <ChevronDownIconWrapIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </Stack__>
      </Stack__>
      <NavDropdonList
        data-plasmic-name={"navDropdonList"}
        data-plasmic-override={overrides.navDropdonList}
        className={classNames("__wab_instance", sty.navDropdonList)}
        link={(() => {
          try {
            return $props.navLinkContent;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  rollover: [
    "rollover",
    "navItemDropdownList",
    "navText",
    "navIconWrap",
    "svg",
    "navDropdonList"
  ],
  navItemDropdownList: ["navItemDropdownList", "navText", "navIconWrap", "svg"],
  navText: ["navText"],
  navIconWrap: ["navIconWrap", "svg"],
  svg: ["svg"],
  navDropdonList: ["navDropdonList"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  rollover: "div";
  navItemDropdownList: "div";
  navText: "div";
  navIconWrap: "div";
  svg: "svg";
  navDropdonList: typeof NavDropdonList;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavDropdown__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavDropdown__VariantsArgs;
    args?: PlasmicNavDropdown__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavDropdown__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavDropdown__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavDropdown__ArgProps,
          internalVariantPropNames: PlasmicNavDropdown__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavDropdown__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "rollover") {
    func.displayName = "PlasmicNavDropdown";
  } else {
    func.displayName = `PlasmicNavDropdown.${nodeName}`;
  }
  return func;
}

export const PlasmicNavDropdown = Object.assign(
  // Top-level PlasmicNavDropdown renders the root element
  makeNodeComponent("rollover"),
  {
    // Helper components rendering sub-elements
    navItemDropdownList: makeNodeComponent("navItemDropdownList"),
    navText: makeNodeComponent("navText"),
    navIconWrap: makeNodeComponent("navIconWrap"),
    svg: makeNodeComponent("svg"),
    navDropdonList: makeNodeComponent("navDropdonList"),

    // Metadata about props expected for PlasmicNavDropdown
    internalVariantProps: PlasmicNavDropdown__VariantProps,
    internalArgProps: PlasmicNavDropdown__ArgProps
  }
);

export default PlasmicNavDropdown;
/* prettier-ignore-end */
