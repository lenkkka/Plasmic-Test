/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6GgaEV8wA3NAjSPNQQE37W
// Component: NXy1tI1D044n

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: WFxcD-A0CuVm/component
import SubmitButton from "../../SubmitButton"; // plasmic-import: FfPpxlM_Ttcg/component

import { useScreenVariants as useScreenVariants_19VDikmmmbc3 } from "./PlasmicGlobalVariant__CloseStatesTabletMobile"; // plasmic-import: 19vDIKMMMBC3/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6GgaEV8wA3NAjSPNQQE37W/projectcss
import sty from "./PlasmicSubscriptionForm.module.css"; // plasmic-import: NXy1tI1D044n/css

createPlasmicElementProxy;

export type PlasmicSubscriptionForm__VariantMembers = {
  formMessage: "success" | "error";
};
export type PlasmicSubscriptionForm__VariantsArgs = {
  formMessage?: MultiChoiceArg<"success" | "error">;
};
type VariantPropType = keyof PlasmicSubscriptionForm__VariantsArgs;
export const PlasmicSubscriptionForm__VariantProps = new Array<VariantPropType>(
  "formMessage"
);

export type PlasmicSubscriptionForm__ArgsType = {};
type ArgPropType = keyof PlasmicSubscriptionForm__ArgsType;
export const PlasmicSubscriptionForm__ArgProps = new Array<ArgPropType>();

export type PlasmicSubscriptionForm__OverridesType = {
  ctaContain?: Flex__<"form">;
  ctaSplitRight?: Flex__<"div">;
  formInput?: Flex__<"div">;
  ctaText2?: Flex__<"label">;
  textInput?: Flex__<typeof TextInput>;
  success?: Flex__<"div">;
  ctaText4?: Flex__<"p">;
  error?: Flex__<"div">;
  ctaText5?: Flex__<"p">;
  formRow?: Flex__<"div">;
  ctaText3?: Flex__<"div">;
  submitButton?: Flex__<typeof SubmitButton>;
};

export interface DefaultSubscriptionFormProps {
  formMessage?: MultiChoiceArg<"success" | "error">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSubscriptionForm__RenderFunc(props: {
  variants: PlasmicSubscriptionForm__VariantsArgs;
  args: PlasmicSubscriptionForm__ArgsType;
  overrides: PlasmicSubscriptionForm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formMessage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.formMessage
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    closeStatesTabletMobile: useScreenVariants_19VDikmmmbc3()
  });

  return (
    (
      hasVariant($state, "formMessage", "error")
        ? (() => {
            try {
              return $state.formMessage;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
        : hasVariant($state, "formMessage", "success")
        ? (() => {
            try {
              return $state.formMessage;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
        : true
    ) ? (
      <Stack__
        as={"form"}
        data-plasmic-name={"ctaContain"}
        data-plasmic-override={overrides.ctaContain}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.ctaContain,
          {
            [sty.ctaContainformMessage_error]: hasVariant(
              $state,
              "formMessage",
              "error"
            ),
            [sty.ctaContainformMessage_success]: hasVariant(
              $state,
              "formMessage",
              "success"
            )
          }
        )}
        id={"subscribe-form"}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"ctaSplitRight"}
          data-plasmic-override={overrides.ctaSplitRight}
          hasGap={true}
          className={classNames(projectcss.all, sty.ctaSplitRight)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"formInput"}
            data-plasmic-override={overrides.formInput}
            hasGap={true}
            className={classNames(projectcss.all, sty.formInput, {
              [sty.formInputformMessage_error]: hasVariant(
                $state,
                "formMessage",
                "error"
              ),
              [sty.formInputformMessage_success]: hasVariant(
                $state,
                "formMessage",
                "success"
              )
            })}
          >
            <label
              data-plasmic-name={"ctaText2"}
              data-plasmic-override={overrides.ctaText2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.ctaText2
              )}
            >
              {"Field Title:"}
            </label>
            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              autoComplete={["on"]}
              autoFocus={true}
              className={classNames("__wab_instance", sty.textInput)}
              defaultValue={``}
              inputMode={"email"}
              inputType={"email"}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["textInput", "value"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={"name@email.com"}
            />
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"success"}
            data-plasmic-override={overrides.success}
            hasGap={true}
            className={classNames(projectcss.all, sty.success, {
              [sty.successformMessage_success]: hasVariant(
                $state,
                "formMessage",
                "success"
              )
            })}
          >
            <p
              data-plasmic-name={"ctaText4"}
              data-plasmic-override={overrides.ctaText4}
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.ctaText4
              )}
            >
              {"Thank You! We received your Email!"}
            </p>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"error"}
            data-plasmic-override={overrides.error}
            hasGap={true}
            className={classNames(projectcss.all, sty.error, {
              [sty.errorformMessage_error]: hasVariant(
                $state,
                "formMessage",
                "error"
              )
            })}
          >
            <p
              data-plasmic-name={"ctaText5"}
              data-plasmic-override={overrides.ctaText5}
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.ctaText5
              )}
            >
              {"Sorry! Something went wrong!"}
            </p>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"formRow"}
            data-plasmic-override={overrides.formRow}
            hasGap={true}
            className={classNames(projectcss.all, sty.formRow, {
              [sty.formRowformMessage_error]: hasVariant(
                $state,
                "formMessage",
                "error"
              ),
              [sty.formRowformMessage_success]: hasVariant(
                $state,
                "formMessage",
                "success"
              )
            })}
          >
            <div
              data-plasmic-name={"ctaText3"}
              data-plasmic-override={overrides.ctaText3}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.ctaText3
              )}
            >
              {
                "By subscribing, you consent to the terms set forth in our Privacy Policy."
              }
            </div>
            <SubmitButton
              data-plasmic-name={"submitButton"}
              data-plasmic-override={overrides.submitButton}
              className={classNames("__wab_instance", sty.submitButton)}
            />
          </Stack__>
        </Stack__>
      </Stack__>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ctaContain: [
    "ctaContain",
    "ctaSplitRight",
    "formInput",
    "ctaText2",
    "textInput",
    "success",
    "ctaText4",
    "error",
    "ctaText5",
    "formRow",
    "ctaText3",
    "submitButton"
  ],
  ctaSplitRight: [
    "ctaSplitRight",
    "formInput",
    "ctaText2",
    "textInput",
    "success",
    "ctaText4",
    "error",
    "ctaText5",
    "formRow",
    "ctaText3",
    "submitButton"
  ],
  formInput: ["formInput", "ctaText2", "textInput"],
  ctaText2: ["ctaText2"],
  textInput: ["textInput"],
  success: ["success", "ctaText4"],
  ctaText4: ["ctaText4"],
  error: ["error", "ctaText5"],
  ctaText5: ["ctaText5"],
  formRow: ["formRow", "ctaText3", "submitButton"],
  ctaText3: ["ctaText3"],
  submitButton: ["submitButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ctaContain: "form";
  ctaSplitRight: "div";
  formInput: "div";
  ctaText2: "label";
  textInput: typeof TextInput;
  success: "div";
  ctaText4: "p";
  error: "div";
  ctaText5: "p";
  formRow: "div";
  ctaText3: "div";
  submitButton: typeof SubmitButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSubscriptionForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSubscriptionForm__VariantsArgs;
    args?: PlasmicSubscriptionForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSubscriptionForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSubscriptionForm__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSubscriptionForm__ArgProps,
          internalVariantPropNames: PlasmicSubscriptionForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSubscriptionForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ctaContain") {
    func.displayName = "PlasmicSubscriptionForm";
  } else {
    func.displayName = `PlasmicSubscriptionForm.${nodeName}`;
  }
  return func;
}

export const PlasmicSubscriptionForm = Object.assign(
  // Top-level PlasmicSubscriptionForm renders the root element
  makeNodeComponent("ctaContain"),
  {
    // Helper components rendering sub-elements
    ctaSplitRight: makeNodeComponent("ctaSplitRight"),
    formInput: makeNodeComponent("formInput"),
    ctaText2: makeNodeComponent("ctaText2"),
    textInput: makeNodeComponent("textInput"),
    success: makeNodeComponent("success"),
    ctaText4: makeNodeComponent("ctaText4"),
    error: makeNodeComponent("error"),
    ctaText5: makeNodeComponent("ctaText5"),
    formRow: makeNodeComponent("formRow"),
    ctaText3: makeNodeComponent("ctaText3"),
    submitButton: makeNodeComponent("submitButton"),

    // Metadata about props expected for PlasmicSubscriptionForm
    internalVariantProps: PlasmicSubscriptionForm__VariantProps,
    internalArgProps: PlasmicSubscriptionForm__ArgProps
  }
);

export default PlasmicSubscriptionForm;
/* prettier-ignore-end */
