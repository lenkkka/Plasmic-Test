/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6GgaEV8wA3NAjSPNQQE37W
// Component: PAg8waIYOX54

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavDropdown from "../../NavDropdown"; // plasmic-import: Fvwf7HKIWogb/component

import { useScreenVariants as useScreenVariants_19VDikmmmbc3 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 19vDIKMMMBC3/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6GgaEV8wA3NAjSPNQQE37W/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: PAg8waIYOX54/css

import ChevronDownIconWrapIcon from "./icons/PlasmicIcon__ChevronDownIconWrap"; // plasmic-import: uBMHnK7097pW/icon

createPlasmicElementProxy;

export type PlasmicNavbar__VariantMembers = {};
export type PlasmicNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbar__ArgsType = {};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbar__OverridesType = {
  navbar?: Flex__<"div">;
  navContain?: Flex__<"div">;
  navTopRow?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  menuList?: Flex__<"div">;
  menuItemsList?: Flex__<"div">;
  navDropdown?: Flex__<typeof NavDropdown>;
  rollover2?: Flex__<"div">;
  navItemDropdownList2?: Flex__<"div">;
  navText2?: Flex__<"div">;
  navIconWrap2?: Flex__<"div">;
  rollover3?: Flex__<"div">;
  navItemDropdownList3?: Flex__<"div">;
  navText3?: Flex__<"div">;
  navIconWrap3?: Flex__<"div">;
  rollover4?: Flex__<"div">;
  navItemDropdownList4?: Flex__<"div">;
  navText4?: Flex__<"div">;
  navIconWrap4?: Flex__<"div">;
  rollover5?: Flex__<"div">;
  navItemDropdownList5?: Flex__<"div">;
  navText5?: Flex__<"div">;
  navIconWrap5?: Flex__<"div">;
  rollover6?: Flex__<"div">;
  btnMainWrap6?: Flex__<"div">;
  btnMainList6?: Flex__<"div">;
  btnMainText6?: Flex__<"div">;
  navIconWrap6?: Flex__<"div">;
};

export interface DefaultNavbarProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_19VDikmmmbc3()
  });

  return (
    <div
      data-plasmic-name={"navbar"}
      data-plasmic-override={overrides.navbar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.navbar
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"navContain"}
        data-plasmic-override={overrides.navContain}
        hasGap={true}
        className={classNames(projectcss.all, sty.navContain)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"navTopRow"}
          data-plasmic-override={overrides.navTopRow}
          hasGap={true}
          className={classNames(projectcss.all, sty.navTopRow)}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"44.880001068115234px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"144px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/blank_website/images/logo2.svg",
              fullWidth: 144,
              fullHeight: 44.880001068115234,
              aspectRatio: 3.2
            }}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"menuList"}
            data-plasmic-override={overrides.menuList}
            hasGap={true}
            className={classNames(projectcss.all, sty.menuList)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"menuItemsList"}
              data-plasmic-override={overrides.menuItemsList}
              hasGap={true}
              className={classNames(projectcss.all, sty.menuItemsList)}
            >
              <NavDropdown
                data-plasmic-name={"navDropdown"}
                data-plasmic-override={overrides.navDropdown}
                className={classNames("__wab_instance", sty.navDropdown)}
                navLinkContent={"About us"}
              />

              <div
                data-plasmic-name={"rollover2"}
                data-plasmic-override={overrides.rollover2}
                className={classNames(projectcss.all, sty.rollover2)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"navItemDropdownList2"}
                  data-plasmic-override={overrides.navItemDropdownList2}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.navItemDropdownList2
                  )}
                >
                  <div
                    data-plasmic-name={"navText2"}
                    data-plasmic-override={overrides.navText2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.navText2
                    )}
                  >
                    {"operations"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"navIconWrap2"}
                    data-plasmic-override={overrides.navIconWrap2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.navIconWrap2)}
                  >
                    <ChevronDownIconWrapIcon
                      className={classNames(projectcss.all, sty.svg__c28HP)}
                      role={"img"}
                    />
                  </Stack__>
                </Stack__>
              </div>
              <div
                data-plasmic-name={"rollover3"}
                data-plasmic-override={overrides.rollover3}
                className={classNames(projectcss.all, sty.rollover3)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"navItemDropdownList3"}
                  data-plasmic-override={overrides.navItemDropdownList3}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.navItemDropdownList3
                  )}
                >
                  <div
                    data-plasmic-name={"navText3"}
                    data-plasmic-override={overrides.navText3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.navText3
                    )}
                  >
                    {"Technology"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"navIconWrap3"}
                    data-plasmic-override={overrides.navIconWrap3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.navIconWrap3)}
                  >
                    <ChevronDownIconWrapIcon
                      className={classNames(projectcss.all, sty.svg__g7AL5)}
                      role={"img"}
                    />
                  </Stack__>
                </Stack__>
              </div>
              <div
                data-plasmic-name={"rollover4"}
                data-plasmic-override={overrides.rollover4}
                className={classNames(projectcss.all, sty.rollover4)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"navItemDropdownList4"}
                  data-plasmic-override={overrides.navItemDropdownList4}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.navItemDropdownList4
                  )}
                >
                  <div
                    data-plasmic-name={"navText4"}
                    data-plasmic-override={overrides.navText4}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.navText4
                    )}
                  >
                    {"Investors"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"navIconWrap4"}
                    data-plasmic-override={overrides.navIconWrap4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.navIconWrap4)}
                  >
                    <ChevronDownIconWrapIcon
                      className={classNames(projectcss.all, sty.svg__nTd92)}
                      role={"img"}
                    />
                  </Stack__>
                </Stack__>
              </div>
              <div
                data-plasmic-name={"rollover5"}
                data-plasmic-override={overrides.rollover5}
                className={classNames(projectcss.all, sty.rollover5)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"navItemDropdownList5"}
                  data-plasmic-override={overrides.navItemDropdownList5}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.navItemDropdownList5
                  )}
                >
                  <div
                    data-plasmic-name={"navText5"}
                    data-plasmic-override={overrides.navText5}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.navText5
                    )}
                  >
                    {"partnerships"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"navIconWrap5"}
                    data-plasmic-override={overrides.navIconWrap5}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.navIconWrap5)}
                  >
                    <ChevronDownIconWrapIcon
                      className={classNames(projectcss.all, sty.svg__wyULc)}
                      role={"img"}
                    />
                  </Stack__>
                </Stack__>
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"rollover6"}
                data-plasmic-override={overrides.rollover6}
                hasGap={true}
                className={classNames(projectcss.all, sty.rollover6)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"btnMainWrap6"}
                  data-plasmic-override={overrides.btnMainWrap6}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.btnMainWrap6)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"btnMainList6"}
                    data-plasmic-override={overrides.btnMainList6}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.btnMainList6)}
                  >
                    <div
                      data-plasmic-name={"btnMainText6"}
                      data-plasmic-override={overrides.btnMainText6}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.btnMainText6
                      )}
                    >
                      {"Media"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"navIconWrap6"}
                      data-plasmic-override={overrides.navIconWrap6}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.navIconWrap6)}
                    >
                      <ChevronDownIconWrapIcon
                        className={classNames(projectcss.all, sty.svg__ezJf)}
                        role={"img"}
                      />
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cb3Z1)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__gbnyK)} />

            <div className={classNames(projectcss.all, sty.freeBox__fjYdR)} />
          </Stack__>
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navbar: [
    "navbar",
    "navContain",
    "navTopRow",
    "img",
    "menuList",
    "menuItemsList",
    "navDropdown",
    "rollover2",
    "navItemDropdownList2",
    "navText2",
    "navIconWrap2",
    "rollover3",
    "navItemDropdownList3",
    "navText3",
    "navIconWrap3",
    "rollover4",
    "navItemDropdownList4",
    "navText4",
    "navIconWrap4",
    "rollover5",
    "navItemDropdownList5",
    "navText5",
    "navIconWrap5",
    "rollover6",
    "btnMainWrap6",
    "btnMainList6",
    "btnMainText6",
    "navIconWrap6"
  ],
  navContain: [
    "navContain",
    "navTopRow",
    "img",
    "menuList",
    "menuItemsList",
    "navDropdown",
    "rollover2",
    "navItemDropdownList2",
    "navText2",
    "navIconWrap2",
    "rollover3",
    "navItemDropdownList3",
    "navText3",
    "navIconWrap3",
    "rollover4",
    "navItemDropdownList4",
    "navText4",
    "navIconWrap4",
    "rollover5",
    "navItemDropdownList5",
    "navText5",
    "navIconWrap5",
    "rollover6",
    "btnMainWrap6",
    "btnMainList6",
    "btnMainText6",
    "navIconWrap6"
  ],
  navTopRow: [
    "navTopRow",
    "img",
    "menuList",
    "menuItemsList",
    "navDropdown",
    "rollover2",
    "navItemDropdownList2",
    "navText2",
    "navIconWrap2",
    "rollover3",
    "navItemDropdownList3",
    "navText3",
    "navIconWrap3",
    "rollover4",
    "navItemDropdownList4",
    "navText4",
    "navIconWrap4",
    "rollover5",
    "navItemDropdownList5",
    "navText5",
    "navIconWrap5",
    "rollover6",
    "btnMainWrap6",
    "btnMainList6",
    "btnMainText6",
    "navIconWrap6"
  ],
  img: ["img"],
  menuList: [
    "menuList",
    "menuItemsList",
    "navDropdown",
    "rollover2",
    "navItemDropdownList2",
    "navText2",
    "navIconWrap2",
    "rollover3",
    "navItemDropdownList3",
    "navText3",
    "navIconWrap3",
    "rollover4",
    "navItemDropdownList4",
    "navText4",
    "navIconWrap4",
    "rollover5",
    "navItemDropdownList5",
    "navText5",
    "navIconWrap5",
    "rollover6",
    "btnMainWrap6",
    "btnMainList6",
    "btnMainText6",
    "navIconWrap6"
  ],
  menuItemsList: [
    "menuItemsList",
    "navDropdown",
    "rollover2",
    "navItemDropdownList2",
    "navText2",
    "navIconWrap2",
    "rollover3",
    "navItemDropdownList3",
    "navText3",
    "navIconWrap3",
    "rollover4",
    "navItemDropdownList4",
    "navText4",
    "navIconWrap4",
    "rollover5",
    "navItemDropdownList5",
    "navText5",
    "navIconWrap5",
    "rollover6",
    "btnMainWrap6",
    "btnMainList6",
    "btnMainText6",
    "navIconWrap6"
  ],
  navDropdown: ["navDropdown"],
  rollover2: ["rollover2", "navItemDropdownList2", "navText2", "navIconWrap2"],
  navItemDropdownList2: ["navItemDropdownList2", "navText2", "navIconWrap2"],
  navText2: ["navText2"],
  navIconWrap2: ["navIconWrap2"],
  rollover3: ["rollover3", "navItemDropdownList3", "navText3", "navIconWrap3"],
  navItemDropdownList3: ["navItemDropdownList3", "navText3", "navIconWrap3"],
  navText3: ["navText3"],
  navIconWrap3: ["navIconWrap3"],
  rollover4: ["rollover4", "navItemDropdownList4", "navText4", "navIconWrap4"],
  navItemDropdownList4: ["navItemDropdownList4", "navText4", "navIconWrap4"],
  navText4: ["navText4"],
  navIconWrap4: ["navIconWrap4"],
  rollover5: ["rollover5", "navItemDropdownList5", "navText5", "navIconWrap5"],
  navItemDropdownList5: ["navItemDropdownList5", "navText5", "navIconWrap5"],
  navText5: ["navText5"],
  navIconWrap5: ["navIconWrap5"],
  rollover6: [
    "rollover6",
    "btnMainWrap6",
    "btnMainList6",
    "btnMainText6",
    "navIconWrap6"
  ],
  btnMainWrap6: [
    "btnMainWrap6",
    "btnMainList6",
    "btnMainText6",
    "navIconWrap6"
  ],
  btnMainList6: ["btnMainList6", "btnMainText6", "navIconWrap6"],
  btnMainText6: ["btnMainText6"],
  navIconWrap6: ["navIconWrap6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  navbar: "div";
  navContain: "div";
  navTopRow: "div";
  img: typeof PlasmicImg__;
  menuList: "div";
  menuItemsList: "div";
  navDropdown: typeof NavDropdown;
  rollover2: "div";
  navItemDropdownList2: "div";
  navText2: "div";
  navIconWrap2: "div";
  rollover3: "div";
  navItemDropdownList3: "div";
  navText3: "div";
  navIconWrap3: "div";
  rollover4: "div";
  navItemDropdownList4: "div";
  navText4: "div";
  navIconWrap4: "div";
  rollover5: "div";
  navItemDropdownList5: "div";
  navText5: "div";
  navIconWrap5: "div";
  rollover6: "div";
  btnMainWrap6: "div";
  btnMainList6: "div";
  btnMainText6: "div";
  navIconWrap6: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navbar") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("navbar"),
  {
    // Helper components rendering sub-elements
    navContain: makeNodeComponent("navContain"),
    navTopRow: makeNodeComponent("navTopRow"),
    img: makeNodeComponent("img"),
    menuList: makeNodeComponent("menuList"),
    menuItemsList: makeNodeComponent("menuItemsList"),
    navDropdown: makeNodeComponent("navDropdown"),
    rollover2: makeNodeComponent("rollover2"),
    navItemDropdownList2: makeNodeComponent("navItemDropdownList2"),
    navText2: makeNodeComponent("navText2"),
    navIconWrap2: makeNodeComponent("navIconWrap2"),
    rollover3: makeNodeComponent("rollover3"),
    navItemDropdownList3: makeNodeComponent("navItemDropdownList3"),
    navText3: makeNodeComponent("navText3"),
    navIconWrap3: makeNodeComponent("navIconWrap3"),
    rollover4: makeNodeComponent("rollover4"),
    navItemDropdownList4: makeNodeComponent("navItemDropdownList4"),
    navText4: makeNodeComponent("navText4"),
    navIconWrap4: makeNodeComponent("navIconWrap4"),
    rollover5: makeNodeComponent("rollover5"),
    navItemDropdownList5: makeNodeComponent("navItemDropdownList5"),
    navText5: makeNodeComponent("navText5"),
    navIconWrap5: makeNodeComponent("navIconWrap5"),
    rollover6: makeNodeComponent("rollover6"),
    btnMainWrap6: makeNodeComponent("btnMainWrap6"),
    btnMainList6: makeNodeComponent("btnMainList6"),
    btnMainText6: makeNodeComponent("btnMainText6"),
    navIconWrap6: makeNodeComponent("navIconWrap6"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
